{"version":3,"sources":["service/property.value.service.ts"],"names":[],"mappings":"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","file":"property.value.service.js","sourcesContent":["import { Injectable, Inject, HttpException } from \"@nestjs/common\";\nimport { PropertyValue } from \"../model/property.value.entity\";\nimport { GoodsProperty } from \"../model/goods.property.entity\";\nimport { Goods } from \"../model/goods.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\n/* 属性值服务组件 */\n@Injectable()\nexport class PropertyValueService {\n\n    constructor(\n        @InjectRepository(Goods) private readonly goodsRepository: Repository<Goods>,\n        @InjectRepository(PropertyValue) private readonly propertyValueRepository: Repository<PropertyValue>,\n        @InjectRepository(GoodsProperty) private readonly goodsPropertyRepository: Repository<GoodsProperty>\n    ) { }\n\n    async getPropertyValues(goodsId: number): Promise<Array<PropertyValue>> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(goodsId);\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        const values: Array<PropertyValue> = await this.propertyValueRepository.createQueryBuilder(\"value\").select([\"value.id\", \"value.price\", \"value.value\"]).where({ goods }).leftJoinAndSelect(\"value.property\", \"property\").getMany();\n        return values;\n    }\n\n    /* 创建指定商品、指定属性的属性值 */\n    async createPropertyValue(goodsId: number, goodsPropertyId: number, value: string, price: number): Promise<void> {\n        const goodsProperty: GoodsProperty | undefined = await this.goodsPropertyRepository.findOne(goodsPropertyId, { relations: [\"goodsType\"] });\n        if (!goodsProperty) {\n            throw new HttpException(\"指定id=\" + goodsPropertyId + \"商品属性不存在\", 404);\n        }\n        const goods: Goods | undefined = await this.goodsRepository.findOne(goodsId, { relations: [\"type\"] });\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        /* 商品属性必须从属于商品的商品类型 */\n        if (goodsProperty.goodsType.id !== goods.type.id) {\n            throw new HttpException(\"指定商品属性id=\" + goodsPropertyId + \"不属于指定商品类型id=\" + goods.type.id, 404);\n        }\n        /* 唯一属性没有价格 */\n        if (goodsProperty.type === \"unique\" && price !== null && price !== undefined) {\n            throw new HttpException(\"唯一属性不能指定价格\", 404);\n        }\n        /* 单选、复选属性必须有价格 */\n        if (goodsProperty.type === \"radio\" && (price === null || price === undefined)) {\n            throw new HttpException(\"单选属性必须指定价格\", 404);\n        }\n        if (goodsProperty.type === \"check\" && (price === null || price === undefined)) {\n            throw new HttpException(\"复选属性必须指定价格\", 404);\n        }\n        /* 属性输入类型为list时，属性值必须被属性的list包含 */\n        if (goodsProperty.inputType === \"list\") {\n            const v = goodsProperty.list.find(item => {\n                return item === value;\n            });\n            if (!v) {\n                throw new HttpException(\"指定商品属性值列表不包含value=\" + value, 404\n                );\n            }\n        }\n        /* 唯一属性值在同一个商品下只能有一个 */\n        if (goodsProperty.type === \"unique\") {\n            const exist: PropertyValue | undefined = await this.propertyValueRepository.findOne({ property: goodsProperty, goods });\n            if (exist) {\n                throw new HttpException(\"指定商品下已存在指定唯一属性name=\" + goodsProperty.name, 404);\n            }\n        }\n        try {\n            await this.propertyValueRepository.save({ value, price, property: goodsProperty, goods });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 更新指定属性值，可以更新属性值属性价格*/\n    async updatePropertyValue(id: number, value: string, price: number): Promise<void> {\n        const propertyValue: PropertyValue | undefined = await this.propertyValueRepository.findOne(id, { relations: [\"property\"] });\n        if (!propertyValue) {\n            throw new HttpException(\"指定id=\" + id + \"属性值不存在\", 404);\n        }\n        value && (propertyValue.value = value);\n        /* 当属性类型不是唯一属性才可以更新属性价格，唯一属性没有价格 */\n        price !== null && price !== undefined && propertyValue.property.type !== \"unique\" && (propertyValue.price = price);\n        try {\n            await this.propertyValueRepository.save(propertyValue);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 删除指定id属性值 */\n    async deletePropertyValue(id: number): Promise<void> {\n        const propertyValue: PropertyValue | undefined = await this.propertyValueRepository.findOne(id);\n        if (!propertyValue) {\n            throw new HttpException(\"指定id=\" + id + \"属性值不存在\", 404);\n        }\n        try {\n            await this.propertyValueRepository.remove(propertyValue);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}