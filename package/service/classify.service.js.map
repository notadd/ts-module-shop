{"version":3,"sources":["service/classify.service.ts"],"names":[],"mappings":"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","file":"classify.service.js","sourcesContent":["import { SecondClassify } from \"../model/second.classify.entity\";\nimport { FirstClassify } from \"../model/first.classify.entity\";\nimport { ThirdClassify } from \"../model/third.classify.entity\";\nimport { Injectable, HttpException } from \"@nestjs/common\";\nimport { Classify } from \"../interface/classify/classify\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\n/* 分类的服务组件，一、二、三级分类三个实体被分别操作 */\n@Injectable()\nexport class ClassifyService {\n\n    constructor(\n        @InjectRepository(FirstClassify) private readonly firstClassifyRepository: Repository<FirstClassify>,\n        @InjectRepository(SecondClassify) private readonly secondClassifyRepository: Repository<SecondClassify>,\n        @InjectRepository(ThirdClassify) private readonly thirdClassifyRepository: Repository<ThirdClassify>\n    ) { }\n\n    /* 获取指定级别、指定父分类下的所有分类，级别是要获取分类的级别，如果父分类不存在，则获取这个级别所有分类，一级分类不需要指定父分类 */\n    async getClassifes(parentId: number, level: number): Promise<Array<Classify>> {\n        if (level === 1) {\n            return this.firstClassifyRepository.find();\n        } else if (level === 2) {\n            let parent: FirstClassify | undefined;\n            if (parentId) {\n                parent = await this.firstClassifyRepository.findOne(parentId);\n                if (!parent) {\n                    throw new HttpException(\"指定id=\" + parentId + \"上级分类不存在\", 404);\n                }\n                return this.secondClassifyRepository.find({ parent });\n            } else {\n                return this.secondClassifyRepository.find();\n            }\n        } else {\n            let parent: SecondClassify | undefined;\n            if (parentId) {\n                parent = await this.secondClassifyRepository.findOne(parentId);\n                if (!parent) {\n                    throw new HttpException(\"指定id=\" + parentId + \"上级分类不存在\", 404);\n                }\n                return this.thirdClassifyRepository.find({ parent });\n            } else {\n                return this.thirdClassifyRepository.find();\n            }\n        }\n    }\n\n    /* 获取指定id、级别分类的具体信息 */\n    async getClassify(id: number, level: number): Promise<Classify | undefined> {\n        let result: any;\n        if (level === 1) {\n            result = await this.firstClassifyRepository.findOne(id);\n        } else if (level === 2) {\n            result = await this.secondClassifyRepository.findOne(id);\n        } else {\n            result = await this.thirdClassifyRepository.findOne(id);\n        }\n        return result;\n    }\n\n    /* 创建指定名称、描述、级别、父分类的分类 */\n    async createClassify(name: string, description: string, level: number, parentId: number): Promise<void> {\n        if (level === 1) {\n            const exist: FirstClassify | undefined = await this.firstClassifyRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"一级分类已存在\", 404);\n            }\n            try {\n                await this.firstClassifyRepository.save({ name, description });\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        } else if (level === 2) {\n            const exist: SecondClassify | undefined = await this.secondClassifyRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"二级分类已存在\", 404);\n            }\n            const parent: FirstClassify | undefined = await this.firstClassifyRepository.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(\"指定id=\" + parentId + \"上级分类不存在\", 404);\n            }\n            try {\n                await this.secondClassifyRepository.save({ name, description, parent });\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        } else {\n            const exist: ThirdClassify | undefined = await this.thirdClassifyRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"三级分类已存在\", 404);\n            }\n            const parent: SecondClassify | undefined = await this.secondClassifyRepository.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(\"指定id=\" + parentId + \"上级分类不存在\", 404);\n            }\n            try {\n                await this.thirdClassifyRepository.save({ name, description, parent });\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        }\n    }\n\n    /* 更新指定id、级别分类，只能更新名称、描述字段，不能更新父分类等 */\n    async updateClassify(id: number, name: string, description: string, level: number): Promise<void> {\n        if (level === 1) {\n            const classify: FirstClassify | undefined = await this.firstClassifyRepository.findOne(id);\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + id + \"一级分类不存在\", 404);\n            }\n            classify.name = name;\n            classify.description = description;\n            try {\n                await this.firstClassifyRepository.save(classify);\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        } else if (level === 2) {\n            const classify: SecondClassify | undefined = await this.secondClassifyRepository.findOne(id);\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + id + \"二级分类不存在\", 404);\n            }\n            classify.name = name;\n            classify.description = description;\n            try {\n                await this.secondClassifyRepository.save(classify);\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        } else {\n            const classify: ThirdClassify | undefined = await this.thirdClassifyRepository.findOne(id);\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + id + \"三级分类不存在\", 404);\n            }\n            classify.name = name;\n            classify.description = description;\n            try {\n                await this.thirdClassifyRepository.save(classify);\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        }\n    }\n\n    /* 删除指定id、级别分类，根据级别分别操作三个实体 */\n    async deleteClassify(id: number, level: number): Promise<void> {\n        if (level === 1) {\n            const classify: FirstClassify | undefined = await this.firstClassifyRepository.findOne(id, { relations: [\"children\"] });\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + id + \"一级分类不存在\", 404);\n            }\n            if (classify.children && classify.children.length > 0) {\n                throw new HttpException(\"指定id=\" + id + \"一级分类下存在二级分类，不能删除\", 404);\n            }\n            try {\n                await this.firstClassifyRepository.remove(classify);\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        } else if (level === 2) {\n            const classify: SecondClassify | undefined = await this.secondClassifyRepository.findOne(id, { relations: [\"children\"] });\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + id + \"二级分类不存在\", 404);\n            }\n            if (classify.children && classify.children.length > 0) {\n                throw new HttpException(\"指定id=\" + id + \"二级分类下存在三级分类，不能删除\", 404);\n            }\n            try {\n                await this.secondClassifyRepository.remove(classify);\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        } else {\n            const classify: ThirdClassify | undefined = await this.thirdClassifyRepository.findOne(id, { relations: [\"goodses\"] });\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + id + \"三级分类不存在\", 404);\n            }\n            if (classify.goodses && classify.goodses.length > 0) {\n                throw new HttpException(\"指定id=\" + id + \"三级分类下存在商品，不能删除\", 404);\n            }\n            try {\n                await this.thirdClassifyRepository.remove(classify);\n            } catch (err) {\n                throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n            }\n        }\n    }\n}\n"]}