{"version":3,"sources":["service/user.receiving.information.service.ts"],"names":[],"mappings":"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","file":"user.receiving.information.service.js","sourcesContent":["import { UserReceivingInformation } from \"../model/user.receiving.information.entity\";\nimport { Repository, Connection, QueryRunner, SelectQueryBuilder } from \"typeorm\";\nimport { Injectable, HttpException, Inject, NotImplementedException } from \"@nestjs/common\";\nimport { UserComponent, UserComponentToken } from \"@notadd/user\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { NodeStringDecoder } from \"string_decoder\";\n\n/* 用户收货信息服务组件 */\n@Injectable()\nexport class UserReceivingInformationService {\n\n    constructor(\n        @Inject(UserComponentToken) private readonly userComponent: UserComponent,\n        @InjectRepository(UserReceivingInformation) private readonly userReceivingInformationRepository: Repository<UserReceivingInformation>\n    ) { }\n\n    async getUserReceivingInformation(id: number): Promise<UserReceivingInformation> {\n        const information: UserReceivingInformation | undefined = await this.userReceivingInformationRepository.findOne(id);\n        if (!information) {\n            throw new HttpException(\"指定id=\" + id + \"用户收货信息不存在\", 404);\n        }\n        return information;\n    }\n\n    async getUserReceivingInformations(userId: number): Promise<Array<UserReceivingInformation>> {\n        const user: { id: number, userName: string, status: boolean, recycle: boolean } | undefined = await this.userComponent.getUserById(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 404);\n        }\n        const informations: Array<UserReceivingInformation> = await this.userReceivingInformationRepository.find({ userId });\n        return informations;\n    }\n\n    async createUserReceivingInformation(\n        userId: number,\n        consignee: string,\n        email: string,\n        region: string,\n        address: string,\n        postCode: string,\n        homePhone: string,\n        mobilePhone: string\n    ): Promise<void> {\n        const user: { id: number, userName: string, status: boolean, recycle: boolean } | undefined = await this.userComponent.getUserById(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 404);\n        }\n        try {\n            await this.userReceivingInformationRepository.save({ userId, consignee, email, region, address, postCode, homePhone, mobilePhone });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateUserReceivingInformation(\n        id: number,\n        consignee: string,\n        email: string,\n        region: string,\n        address: string,\n        postCode: string,\n        homePhone: string,\n        mobilePhone: string\n    ): Promise<void> {\n        const userReveivingInformation: UserReceivingInformation | undefined = await this.userReceivingInformationRepository.findOne(id);\n        if (!userReveivingInformation) {\n            throw new HttpException(\"指定id=\" + id + \"用户收货信息不存在\", 404);\n        }\n        userReveivingInformation.consignee = consignee;\n        userReveivingInformation.email = email;\n        userReveivingInformation.region = region;\n        userReveivingInformation.address = address;\n        userReveivingInformation.postCode = postCode;\n        userReveivingInformation.homePhone = homePhone;\n        userReveivingInformation.mobilePhone = mobilePhone;\n        try {\n            await this.userReceivingInformationRepository.save(userReveivingInformation);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteUserReceivingInformation(id: number): Promise<void> {\n        const userReveivingInformation: UserReceivingInformation | undefined = await this.userReceivingInformationRepository.findOne(id);\n        if (!userReveivingInformation) {\n            throw new HttpException(\"指定id=\" + id + \"用户收货信息不存在\", 404);\n        }\n        try {\n            await this.userReceivingInformationRepository.remove(userReveivingInformation);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n}\n"]}