{"version":3,"sources":["service/goods.image.service.ts"],"names":[],"mappings":"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","file":"goods.image.service.js","sourcesContent":["import { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { StoreComponent } from \"../interface/store.component\";\nimport { GoodsImage } from \"../model/goods.image.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Goods } from \"../model/goods.entity\";\nimport { Repository } from \"typeorm\";\nimport { Request } from \"express\";\n\n/* 商品图片的服务组件 */\n@Injectable()\nexport class GoodsImageService {\n\n    constructor(\n        @Inject(\"StoreComponentToken\") private readonly storeComponent: StoreComponent,\n        @InjectRepository(Goods) private readonly goodsRepository: Repository<Goods>,\n        @InjectRepository(GoodsImage) private readonly goodsImageRepository: Repository<GoodsImage>\n    ) { }\n\n    async getGoodsImages(req: Request, goodsId: number): Promise<Array<{ id: number, bucketName: string, name: string, type: string, url: string }>> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(goodsId, { relations: [\"images\"] });\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        const images: Array<{ id: number, bucketName: string, name: string, type: string, url: string }> = goods.images as any;\n        for (let i = 0; i < images.length; i++) {\n            images[i].url = await this.storeComponent.getUrl(req, images[i].bucketName, images[i].name, images[i].type, undefined);\n        }\n        return images;\n    }\n\n    async createGoodsImage(goodsId: number, bucketName: string, rawName: string, base64: string): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(goodsId);\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        const { name, type } = await this.storeComponent.upload(bucketName, rawName, base64, undefined);\n        try {\n            await this.goodsImageRepository.save({ bucketName, name, type, goods });\n        } catch (err) {\n            await this.storeComponent.delete(bucketName, name, type);\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteGoodsImage(goodsId: number, id: number): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(goodsId, { relations: [\"images\"] });\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        const image: GoodsImage | undefined = goods.images.find(img => img.id === id);\n        if (!image) {\n            throw new HttpException(\"指定id=\" + id + \"图片不存在于指定id=\" + goodsId + \"商品之下\", 404);\n        }\n        try {\n            await this.storeComponent.delete(image.bucketName, image.name, image.type);\n            await this.goodsImageRepository.remove(image);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}