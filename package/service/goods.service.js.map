{"version":3,"sources":["service/goods.service.ts"],"names":[],"mappings":"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","file":"goods.service.js","sourcesContent":["import { Repository, Connection, QueryRunner, SelectQueryBuilder } from \"typeorm\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { ThirdClassify } from \"../model/third.classify.entity\";\nimport { PropertyValue } from \"../model/property.value.entity\";\nimport { GoodsData } from \"../interface/goods/goods.data\";\nimport { GoodsType } from \"../model/goods.type.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Goods } from \"../model/goods.entity\";\nimport { Brand } from \"../model/brand.entity\";\n\n/* 商品服务组件 */\n@Injectable()\nexport class GoodsService {\n\n    constructor(\n        @Inject(Connection) private readonly connection: Connection,\n        @InjectRepository(Brand) private readonly brandRepository: Repository<Brand>,\n        @InjectRepository(Goods) private readonly goodsRepository: Repository<Goods>,\n        @InjectRepository(GoodsType) private readonly goodsTypeRepository: Repository<GoodsType>,\n        @InjectRepository(ThirdClassify) private readonly thirdClassifyRepository: Repository<ThirdClassify>,\n        @InjectRepository(PropertyValue) private readonly propertyValueRepository: Repository<PropertyValue>\n    ) { }\n\n    /* 获取指定分类下所有商品，如果传递分页参数则分页获取,只能获取不在回收站中商品 */\n    async getGoodses(classifyId: number, pageNumber: number, pageSize: number): Promise<Array<Goods>> {\n        const classify: ThirdClassify | undefined = await this.thirdClassifyRepository.findOne(classifyId);\n        if (!classify) {\n            throw new HttpException(\"指定id=\" + classifyId + \"分类不存在\", 404);\n        }\n        let queryBuilder: SelectQueryBuilder<Goods> = this.goodsRepository\n            .createQueryBuilder(\"goods\")\n            .select([\"goods.id\", \"goods.name\", \"goods.no\", \"goods.basePrice\", \"goods.discountPrice\", \"goods.description\", \"goods.recycle\"])\n            .where({ classifyId, recycle: false });\n        if (pageNumber && pageSize) {\n            queryBuilder = queryBuilder.offset((pageNumber - 1) * pageSize).limit(pageSize);\n        }\n        const goodses: Array<Goods> = await queryBuilder.getMany();\n        return goodses;\n    }\n\n    /* 获取回收站中商品，可以分页获取 */\n    async getRecycleGoodses(pageNumber: number, pageSize: number): Promise<Array<Goods>> {\n        let queryBuilder: SelectQueryBuilder<Goods> = this.goodsRepository\n            .createQueryBuilder(\"goods\")\n            .select([\"goods.id\", \"goods.name\", \"goods.no\", \"goods.basePrice\", \"goods.discountPrice\", \"goods.description\", \"goods.recycle\"])\n            .where({ recycle: true });\n        if (pageNumber && pageSize) {\n            queryBuilder = queryBuilder.offset((pageNumber - 1) * pageSize).limit(pageSize);\n        }\n        const recycleGoodses: Array<Goods> = await queryBuilder.getMany();\n        return recycleGoodses;\n    }\n\n    /* 获取指定的详细信息，会同时获取商品所属类型以及类型下的属性、商品下所有属性值以及属性值关联的属性 */\n    async getGoods(id: number): Promise<Goods> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(id, { relations: [\"type\", \"values\"] });\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + id + \"商品不存在\", 404);\n        }\n        return goods;\n    }\n\n    /* 创建商品，只有品牌可以为空，其他属性都不能为空 */\n    async createGoods(name: string, no: string, basePrice: number, discountPrice: number, description: string, classifyId: number, goodsTypeId: number, brandId: number): Promise<void> {\n        const exist: Goods | undefined = await this.goodsRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定name=\" + name + \"商品已存在\", 404);\n        }\n        const classify: ThirdClassify | undefined = await this.thirdClassifyRepository.findOne(classifyId);\n        if (!classify) {\n            throw new HttpException(\"指定id=\" + classifyId + \"分类不存在\", 404);\n        }\n        const type: GoodsType | undefined = await this.goodsTypeRepository.findOne(goodsTypeId);\n        if (!type) {\n            throw new HttpException(\"指定id\" + goodsTypeId + \"商品类型不存在\", 404);\n        }\n        let brand: Brand | undefined;\n        if (brandId) {\n            brand = await this.brandRepository.findOne(brandId);\n            if (!brand) {\n                throw new HttpException(\"指定id\" + brandId + \"品牌不存在\", 404);\n            }\n        }\n        try {\n            await this.goodsRepository.save({ name, no, basePrice, discountPrice, description, classify, type, brand });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 更新指定商品，如果商品分类被更新，则商品下原来所有的商品属性值都会被删除 */\n    async updateGoods(id: number, name: string, no: string, basePrice: number, discountPrice: number, description: string, classifyId: number, goodsTypeId: number, brandId: number): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(id, { relations: [\"classify\", \"type\", \"values\", \"brand\"] });\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + id + \"商品不存在\", 404);\n        }\n        if (goods.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"商品已经存在于回收站中，不能更新\", 404);\n        }\n        if (name && (name !== goods.name)) {\n            const exist: Goods | undefined = await this.goodsRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"商品已存在\", 404);\n            }\n            goods.name = name;\n        }\n        no && (goods.no = no);\n        basePrice && (goods.basePrice = basePrice);\n        discountPrice && (goods.discountPrice = discountPrice);\n        description && (goods.description = description);\n        if (classifyId && (classifyId !== goods.classify.id)) {\n            const classify: ThirdClassify | undefined = await this.thirdClassifyRepository.findOne(classifyId);\n            if (!classify) {\n                throw new HttpException(\"指定id=\" + classifyId + \"分类不存在\", 404);\n            }\n            goods.classify = classify;\n        }\n        /* 解除商品与商品类型关系时，需要删除商品下存在的属性值 */\n        let changeGoodsType = false;\n        if (goodsTypeId && (goodsTypeId !== goods.type.id)) {\n            const type: GoodsType | undefined = await this.goodsTypeRepository.findOne(goodsTypeId);\n            if (!type) {\n                throw new HttpException(\"指定id\" + goodsTypeId + \"商品类型不存在\", 404);\n            }\n            goods.type = type;\n            changeGoodsType = true;\n        }\n        if (brandId && (brandId !== goods.brand.id)) {\n            const brand: Brand | undefined = await this.brandRepository.findOne(brandId);\n            if (!brand) {\n                throw new HttpException(\"指定id\" + brandId + \"品牌不存在\", 404);\n            }\n            goods.brand = brand;\n        }\n        const queryRunner: QueryRunner = this.connection.createQueryRunner(\"master\");\n        try {\n            await queryRunner.startTransaction();\n            if (changeGoodsType) {\n                await queryRunner.manager.remove(goods.values);\n            }\n            await queryRunner.manager.save(goods);\n            await queryRunner.commitTransaction();\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 删除商品时，其下所有属性值也会被删除,这是由数据库的外键关联删除的 */\n    async deleteGoods(id: number): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(id);\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + id + \"商品不存在\", 404);\n        }\n        if (!goods.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"商品不在回收站中，不能删除，需要先放入回收站中才可删除\", 404);\n        }\n        try {\n            await this.goodsRepository.remove(goods);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 软删除商品，即放入回收站中，其实是将商品的recycle属性置为true，说明商品在回收站中 */\n    async softDeleteGoods(id: number): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(id);\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + id + \"商品不存在\", 404);\n        }\n        if (goods.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"商品已经存在于回收站中，不需要软删除\", 404);\n        }\n        try {\n            goods.recycle = true;\n            await this.goodsRepository.save(goods);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 软删除多个商品 */\n    async softDeleteGoodses(ids: Array<number>): Promise<void> {\n        const goodses: Array<Goods> | undefined = await this.goodsRepository.findByIds(ids);\n        for (let i = 0; i < ids.length; i++) {\n            const index: number = goodses.findIndex(goods => {\n                return goods.id === ids[i];\n            });\n            if (index < 0) {\n                throw new HttpException(\"指定id=\" + ids[i] + \"商品不存在\", 404);\n            }\n            if (goodses[index].recycle) {\n                throw new HttpException(\"指定id=\" + ids[i] + \"商品已经存在于回收站中，不需要软删除\", 404);\n            }\n            goodses[index].recycle = true;\n        }\n        try {\n            await this.goodsRepository.save(goodses);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 从回收站中还原商品，即将recycle属性置为false */\n    async restoreGoods(id: number): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(id);\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + id + \"商品不存在\", 404);\n        }\n        if (!goods.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"商品不在回收站中，不需要还原\", 404);\n        }\n        try {\n            goods.recycle = false;\n            await this.goodsRepository.save(goods);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 还原多个商品 */\n    async restoreGoodses(ids: Array<number>): Promise<void> {\n        const goodses: Array<Goods> | undefined = await this.goodsRepository.findByIds(ids);\n        for (let i = 0; i < ids.length; i++) {\n            const index: number = goodses.findIndex(goods => {\n                return goods.id === ids[i];\n            });\n            if (index < 0) {\n                throw new HttpException(\"指定id=\" + ids[i] + \"商品不存在\", 404);\n            }\n            if (!goodses[index].recycle) {\n                throw new HttpException(\"指定id=\" + ids[i] + \"商品不在回收站中，不需要还原\", 404);\n            }\n            goodses[index].recycle = false;\n        }\n        try {\n            await this.goodsRepository.save(goodses);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n}\n"]}