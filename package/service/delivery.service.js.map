{"version":3,"sources":["service/delivery.service.ts"],"names":[],"mappings":"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","file":"delivery.service.js","sourcesContent":["import { Injectable, HttpException } from \"@nestjs/common\";\nimport { Delivery } from \"../model/delivery.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\n/* 配送服务的组件 */\n@Injectable()\nexport class DeliveryService {\n\n    constructor(\n        @InjectRepository(Delivery) private readonly deliveryRepository: Repository<Delivery>\n    ) { }\n\n    async getDeliveries(): Promise<Array<Delivery>> {\n        const deliveries = await this.deliveryRepository.find();\n        return deliveries;\n    }\n\n    async createDelivery(name: string, description: string, cost: number, freeLimit: number, valuationFee: number): Promise<void> {\n        const exist: Delivery | undefined = await this.deliveryRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定name=\" + name + \"配送信息已存在\", 404);\n        }\n        try {\n            await this.deliveryRepository.save({ name, description, cost, freeLimit, valuationFee });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateDelivery(id: number, name: string, description: string, cost: number, freeLimit: number, valuationFee: number): Promise<void> {\n        const delivery: Delivery | undefined = await this.deliveryRepository.findOne(id);\n        if (!delivery) {\n            throw new HttpException(\"指定id=\" + id + \"配送信息不存在\", 404);\n        }\n        if (name && name !== delivery.name) {\n            const exist: Delivery | undefined = await this.deliveryRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"配送信息已存在\", 404);\n            }\n            delivery.name = name;\n        }\n        if (description) {\n            delivery.description = description;\n        }\n        if (cost !== undefined && cost !== null) {\n            delivery.cost = cost;\n        }\n        if (freeLimit !== undefined && freeLimit !== null) {\n            delivery.freeLimit = freeLimit;\n        }\n        if (valuationFee !== undefined && valuationFee !== null) {\n            delivery.valuationFee = valuationFee;\n        }\n        try {\n            await this.deliveryRepository.save(delivery);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n    async deleteDelivery(id: number): Promise<void> {\n        const delivery: Delivery|undefined = await this.deliveryRepository.findOne(id);\n        if (!delivery) {\n            throw new HttpException(\"指定id=\" + id + \"配送信息不存在\", 404);\n        }\n        try {\n            await this.deliveryRepository.remove(delivery);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}