{"version":3,"sources":["service/order.service.ts"],"names":[],"mappings":"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","file":"order.service.js","sourcesContent":["import { UserReceivingInformation } from \"../model/user.receiving.information.entity\";\nimport { Repository, Connection, QueryRunner, SelectQueryBuilder } from \"typeorm\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { UserComponent, UserComponentToken } from \"@notadd/user\";\nimport { OrderItem } from \"../model/order.item.entity\";\nimport { Delivery } from \"../model/delivery.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { RandomUtil } from \"../util/random.util\";\nimport { Order } from \"../model/order.entity\";\nimport { DateUtil } from \"../util/date.util\";\nimport { Sku } from \"../model/sku.entity\";\n\n/* 订单服务组件 */\n@Injectable()\nexport class OrderService {\n\n    constructor(\n        @Inject(DateUtil) private readonly dateUtil: DateUtil,\n        @Inject(Connection) private readonly connection: Connection,\n        @Inject(RandomUtil) private readonly randomUtil: RandomUtil,\n        @InjectRepository(Sku) private readonly skuRepository: Repository<Sku>,\n        @Inject(UserComponentToken) private readonly userComponent: UserComponent,\n        @InjectRepository(Order) private readonly orderRepository: Repository<Order>,\n        @InjectRepository(OrderItem) private readonly orderItemRepository: Repository<OrderItem>,\n        @InjectRepository(Delivery) private readonly deliveryRepository: Repository<Delivery>,\n        @InjectRepository(UserReceivingInformation) private readonly userReceivingInformationRepository: Repository<UserReceivingInformation>\n    ) { }\n\n    async getOrders(): Promise<Array<Order>> {\n        const orders: Array<Order> | undefined = await this.orderRepository.createQueryBuilder(\"order\")\n            .leftJoinAndSelect(\"order.items\", \"item\")\n            .leftJoinAndSelect(\"order.delivery\", \"delivery\")\n            .leftJoinAndSelect(\"order.userReceivingInformation\", \"userReceivingInformation\")\n            .getMany();\n        return orders;\n    }\n\n    async getOrder(id: number): Promise<Order> {\n        const order: Order | undefined = await this.orderRepository.createQueryBuilder(\"order\")\n            .leftJoinAndSelect(\"order.items\", \"item\")\n            .leftJoinAndSelect(\"order.delivery\", \"delivery\")\n            .leftJoinAndSelect(\"order.userReceivingInformation\", \"userReceivingInformation\")\n            .getOne();\n        if (!order) {\n            throw new HttpException(\"指定id=\" + id + \"订单不存在\", 404);\n        }\n        return order;\n    }\n\n    async createOrder(\n        userId: number,\n        delivertNo: string,\n        delivertTime: string,\n        invoiceType: string,\n        invoiceContent: string,\n        invoiceTitle: string,\n        customerMessage: string,\n        deliveryId: number,\n        userReceivingInformationId: number,\n        items: Array<{ skuId: number, count: number }>\n    ): Promise<void> {\n        const user: { id: number, userName: string, status: boolean, recycle: boolean } | undefined = await this.userComponent.getUserById(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 404);\n        }\n        const delivery: Delivery | undefined = await this.deliveryRepository.findOne(deliveryId);\n        if (!delivery) {\n            throw new HttpException(\"指定id=\" + deliveryId + \"配送信息不存在\", 404);\n        }\n        const userReceivingInformation: UserReceivingInformation | undefined = await this.userReceivingInformationRepository.findOne(userReceivingInformationId);\n        if (!userReceivingInformation) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        /* 生成32位订单号  */\n        const orderNo = this.dateUtil.getString(new Date()) + this.randomUtil.getRandom(18);\n        const orderItems: Array<OrderItem> = new Array();\n        for (let i = 0; i < items.length; i++) {\n            const sku: Sku | undefined = await this.skuRepository.findOne(items[i].skuId);\n            if (!sku) {\n                throw new HttpException(\"指定id=\" + items[i].skuId + \"Sku不存在\", 404);\n            }\n            if (sku.inventory < items[i].count) {\n                throw new HttpException(\"商品库存小于购买数量\", 404);\n            }\n            orderItems[i] = this.orderItemRepository.create({ count: items[i].count, userId, sku, });\n        }\n        const queryRunner: QueryRunner = this.connection.createQueryRunner(\"master\");\n        await queryRunner.startTransaction();\n        try {\n            for (let i = 0; i < items.length; i++) {\n                await queryRunner.manager.save(orderItems[i]);\n                /* 更新库存 */\n                orderItems[i].sku.inventory -= items[i].count;\n                await queryRunner.manager.save(orderItems[i].sku);\n            }\n            await queryRunner.manager.save(\n                this.orderRepository.create({ orderNo, userId, delivertNo, delivertTime: new Date(delivertTime), invoiceType, invoiceContent, invoiceTitle, customerMessage, delivery, userReceivingInformation, orderItems })\n            );\n            await queryRunner.commitTransaction();\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            console.log(err);\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    async createOrderFromCart(\n        userId: number,\n        delivertNo: string,\n        delivertTime: string,\n        invoiceType: string,\n        invoiceContent: string,\n        invoiceTitle: string,\n        customerMessage: string,\n        deliveryId: number,\n        userReceivingInformationId: number,\n        itemIds: Array<number>\n    ): Promise<void> {\n        const user: { id: number, userName: string, status: boolean, recycle: boolean } | undefined = await this.userComponent.getUserById(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 404);\n        }\n        const delivery: Delivery | undefined = await this.deliveryRepository.findOne(deliveryId);\n        if (!delivery) {\n            throw new HttpException(\"指定id=\" + deliveryId + \"配送信息不存在\", 404);\n        }\n        const userReceivingInformation: UserReceivingInformation | undefined = await this.userReceivingInformationRepository.findOne(userReceivingInformationId);\n        if (!userReceivingInformation) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        /* 生成32位订单号  */\n        const orderNo = this.dateUtil.getString(new Date()) + this.randomUtil.getRandom(18);\n        const items: Array<OrderItem> | undefined = await this.orderItemRepository.findByIds(itemIds, { relations: [\"order\"] });\n        itemIds.forEach(id => {\n            const item: OrderItem | undefined = items.find(i => i.id === id);\n            if (!item) {\n                throw new HttpException(\"指定id=\" + id + \"订单项不存在\", 404);\n            }\n            if (item.userId !== userId) {\n                throw new HttpException(\"指定订单项不属于指定id=\" + userId + \"用户\", 404);\n            }\n            if (item.order) {\n                throw new HttpException(\"指定订单项id=\" + id + \"已属于订单\", 404);\n            }\n        });\n        const queryRunner: QueryRunner = this.connection.createQueryRunner(\"master\");\n        await queryRunner.startTransaction();\n        try {\n            for (let i = 0; i < items.length; i++) {\n                items[i].sku.inventory -= items[i].count;\n                await queryRunner.manager.save(items[i].sku);\n            }\n            await queryRunner.manager.save({ orderNo, userId, delivertNo, delivertTime: new Date(delivertTime), invoiceType, invoiceContent, invoiceTitle, customerMessage, delivery, userReceivingInformation, items });\n            await queryRunner.commitTransaction();\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    async updateOrder(\n        id: number,\n        delivertNo: string,\n        delivertTime: string,\n        invoiceType: string,\n        invoiceContent: string,\n        invoiceTitle: string,\n        customerMessage: string,\n        deliveryId: number,\n        userReceivingInformationId: number\n    ): Promise<void> {\n        const order: Order | undefined = await this.orderRepository.findOne(id);\n        if (!order) {\n            throw new HttpException(\"指定id=\" + id + \"订单不存在\", 404);\n        }\n        const delivery: Delivery | undefined = await this.deliveryRepository.findOne(deliveryId);\n        if (!delivery) {\n            throw new HttpException(\"指定id=\" + deliveryId + \"配送信息不存在\", 404);\n        }\n        const userReceivingInformation: UserReceivingInformation | undefined = await this.userReceivingInformationRepository.findOne(userReceivingInformationId);\n        if (!userReceivingInformation) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        order.delivertNo = delivertNo;\n        order.delivertTime = new Date(delivertTime);\n        order.invoiceType = invoiceType;\n        order.invoiceContent = invoiceContent;\n        order.invoiceTitle = invoiceTitle;\n        order.customerMessage = customerMessage;\n        order.delivery = delivery;\n        order.userReceivingInformation = userReceivingInformation;\n        try {\n            await this.orderRepository.save(order);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteOrder(id: number): Promise<void> {\n        const order: Order | undefined = await this.orderRepository.findOne(id);\n        if (!order) {\n            throw new HttpException(\"指定id=\" + id + \"订单不存在\", 404);\n        }\n        try {\n            await this.orderRepository.remove(order);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}