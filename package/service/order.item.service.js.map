{"version":3,"sources":["service/order.item.service.ts"],"names":[],"mappings":"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","file":"order.item.service.js","sourcesContent":["import { Repository, Connection, QueryRunner, SelectQueryBuilder } from \"typeorm\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { UserComponent, UserComponentToken } from \"@notadd/user\";\nimport { OrderItem } from \"../model/order.item.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Sku } from \"../model/sku.entity\";\n\n/* 订单项服务组件 */\n@Injectable()\nexport class OrderItemService {\n\n    constructor(\n        @InjectRepository(Sku) private readonly skuRepository: Repository<Sku>,\n        @Inject(UserComponentToken) private readonly userComponent: UserComponent,\n        @InjectRepository(OrderItem) private readonly orderItemRepository: Repository<OrderItem>,\n    ) { }\n\n    /* 获取指定用户购物车订单项，即过滤出order属性不存在的订单项 */\n    async findCartItems(userId: number): Promise<Array<OrderItem>> {\n        const cartItems: Array<OrderItem> | undefined = await this.orderItemRepository.createQueryBuilder(\"item\")\n            .where({ userId })\n            .leftJoinAndSelect(\"item.sku\", \"sku\")\n            .leftJoinAndSelect(\"item.order\", \"order\")\n            .getMany();\n        return cartItems.filter(item => !item.order);\n    }\n\n    async findOrderItem(id: number): Promise<OrderItem> {\n        const orderItem: OrderItem | undefined = await this.orderItemRepository.createQueryBuilder(\"item\")\n            .where({ id })\n            .leftJoinAndSelect(\"item.sku\", \"sku\")\n            .leftJoinAndSelect(\"item.order\", \"order\")\n            .getOne();\n        if (!orderItem) {\n            throw new HttpException(\"指定id=\" + id + \"订单项不存在\", 404);\n        }\n        return orderItem;\n    }\n\n    async createOrderItem(count: number, skuId: number, userId: number): Promise<void> {\n        const user: { id: number, userName: string, status: boolean, recycle: boolean } | undefined = await this.userComponent.getUserById(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 404);\n        }\n        const sku: Sku | undefined = await this.skuRepository.findOne(skuId);\n        if (!sku) {\n            throw new HttpException(\"指定id=\" + skuId + \"Sku不存在\", 404);\n        }\n        try {\n            await this.orderItemRepository.save({ count, userId, sku });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateOrderItem(id: number, count: number): Promise<void> {\n        const item: OrderItem | undefined = await this.orderItemRepository.findOne(id);\n        if (!item) {\n            throw new HttpException(\"指定id=\" + id + \"订单项不存在\", 404);\n        }\n        item.count = count;\n        try {\n            await this.orderItemRepository.save(item);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteOrderItem(id: number): Promise<void> {\n        const item: OrderItem | undefined = await this.orderItemRepository.findOne(id);\n        if (!item) {\n            throw new HttpException(\"指定id=\" + id + \"订单项不存在\", 404);\n        }\n        try {\n            await this.orderItemRepository.remove(item);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}