{"version":3,"sources":["service/member.service.ts"],"names":[],"mappings":"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","file":"member.service.js","sourcesContent":["import { Repository, Connection, QueryRunner, SelectQueryBuilder } from \"typeorm\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Member } from \"../model/member.entity\";\n\n/* 会员服务组件 */\n@Injectable()\nexport class MemberService {\n\n    constructor(\n        @InjectRepository(Member) private readonly memberRepository: Repository<Member>,\n    ) { }\n\n    async getMembers(): Promise<Array<Member>> {\n        const members: Array<Member> | undefined = await this.memberRepository.find();\n        return members;\n    }\n\n    async getMember(id: number): Promise<Member> {\n        const member: Member | undefined = await this.memberRepository.findOne(id);\n        if (!member) {\n            throw new HttpException(\"指定id=\" + id + \"会员不存在\", 404);\n        }\n        return member;\n    }\n\n    async createMember(\n        name: string,\n        realName: string,\n        email: string,\n        sex: string,\n        idNumber: string,\n        birthday: string,\n        password: string,\n        mobilePhone: string\n    ): Promise<void> {\n        const exist: Member | undefined = await this.memberRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定name=\" + name + \"会员已存在\", 404);\n        }\n        try {\n            await this.memberRepository.save({ name, realName, email, sex, idNumber, birthday, password, mobilePhone });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateMember(\n        id: number,\n        email: string,\n        sex: string,\n        birthday: string,\n        password: string,\n        mobilePhone: string\n    ): Promise<void> {\n        const member: Member | undefined = await this.memberRepository.findOne(id);\n        if (!member) {\n            throw new HttpException(\"指定id=\" + id + \"会员不存在\", 404);\n        }\n        member.email = email;\n        member.sex = sex;\n        member.birthday = new Date(birthday);\n        member.password = password;\n        member.mobilePhone = mobilePhone;\n        try {\n            await this.memberRepository.save(member);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteMember(id: number): Promise<void> {\n        const member: Member | undefined = await this.memberRepository.findOne(id);\n        if (!member) {\n            throw new HttpException(\"指定id=\" + id + \"会员不存在\", 404);\n        }\n        try {\n            await this.memberRepository.remove(member);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n}\n"]}