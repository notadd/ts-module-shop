{"version":3,"sources":["service/goods.type.service.ts"],"names":[],"mappings":"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","file":"goods.type.service.js","sourcesContent":["import { Injectable, Inject, HttpException } from \"@nestjs/common\";\nimport { GoodsType } from \"../model/goods.type.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\n@Injectable()\nexport class GoodsTypeService {\n\n    constructor(\n        @InjectRepository(GoodsType) private readonly goodsTypeRepository: Repository<GoodsType>,\n    ) { }\n\n    /* 获取指定id商品类型，以及其下所有商品属性 */\n    async getGoodsType(id: number): Promise<GoodsType> {\n        const goodsType: GoodsType | undefined = await this.goodsTypeRepository.findOne(id, { relations: [\"properties\"] });\n        if (!goodsType) {\n            throw new HttpException(\"指定id=\" + id + \"商品类型不存在\", 404);\n        }\n        return goodsType;\n    }\n\n    /* 获取当前所有商品类型 */\n    async getGoodsTypes(): Promise<Array<GoodsType>> {\n        return this.goodsTypeRepository.find();\n    }\n\n    /* 创建指定名称商品类型 ，名称已存在，抛出异常*/\n    async createGoodsType(name: string): Promise<void> {\n        const exist: GoodsType | undefined = await this.goodsTypeRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定name=\" + name + \"商品类型已存在\", 404);\n        }\n        try {\n            await this.goodsTypeRepository.save({ name });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 更新指定名称商品类型，只更新名称，其下所有商品属性、商品不变 */\n    async updateGoodsType(id: number, name: string): Promise<void> {\n        const goodsType: GoodsType | undefined = await this.goodsTypeRepository.findOne(id);\n        if (!goodsType) {\n            throw new HttpException(\"指定id=\" + id + \"商品类型不存在\", 404);\n        }\n        if (name && (name !== goodsType.name)) {\n            const exist: GoodsType | undefined = await this.goodsTypeRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"商品类型已存在\", 404);\n            }\n            goodsType.name = name;\n        }\n        try {\n            await this.goodsTypeRepository.save(goodsType);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    /* 删除指定id商品类型，商品类型下存在商品则抛出异常，商品属性级联删除 */\n    async deleteGoodsType(id: number): Promise<void> {\n        const goodsType: GoodsType | undefined = await this.goodsTypeRepository.findOne(id, { relations: [\"properties\", \"goodses\"] });\n        if (!goodsType) {\n            throw new HttpException(\"指定id=\" + id + \"商品类型不存在\", 404);\n        }\n        /* 商品类型下还有商品则不能删除，必须先解除两者关系 */\n        if (goodsType.goodses && goodsType.goodses.length > 0) {\n            throw new HttpException(\"指定商品类型下存在商品，请先将商品移动到其他商品类型下再删除\", 404);\n        }\n        try {\n            await this.goodsTypeRepository.remove(goodsType);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}