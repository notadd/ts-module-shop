{"version":3,"sources":["service/store.setting.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,2CAAmE;AAEnE,wEAA6D;AAC7D,6CAAmD;AACnD,qCAAqC;AAKrC,IAAa,mBAAmB,GAAhC;IAEI,YACoD,cAA8B,EAC7B,sBAAgD;QADjD,mBAAc,GAAd,cAAc,CAAgB;QAC7B,2BAAsB,GAAtB,sBAAsB,CAA0B;IACjG,CAAC;IAEC,eAAe,CAAC,GAAY;;YAC9B,MAAM,YAAY,GAAQ,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvE,IAAI,CAAC,YAAY,EAAE;gBACf,MAAM,IAAI,sBAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;aAC3C;YACD,YAAY,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,cAAc,EAAE,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACnJ,OAAO,YAAY,CAAC;QACxB,CAAC;KAAA;IAEK,gBAAgB,CAClB,cAAsB,EACtB,WAAmB,EACnB,UAAkB,EAClB,KAAa,EACb,MAAc,EACd,OAAe,EACf,KAAc,EACd,WAAmB,EACnB,YAAoB;;YAEpB,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YACxH,IAAI;gBACA,MAAM,OAAO,GAAiB,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC;oBAC7D,EAAE,EAAE,CAAC;oBACL,cAAc,EAAE,UAAU;oBAC1B,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,IAAI;oBACd,KAAK;oBACL,MAAM;oBACN,OAAO;oBACP,KAAK;oBACL,WAAW;oBACX,YAAY;iBACf,CAAC,CAAC;gBACH,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACnD;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;IAEK,iBAAiB;;YACnB,MAAM,OAAO,GAA6B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvF,IAAI,CAAC,OAAO,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;aAC3C;YACD,IAAI;gBACA,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC7F,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aACrD;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;CAEJ,CAAA;AA5DY,mBAAmB;IAD/B,mBAAU,EAAE;IAIJ,WAAA,eAAM,CAAC,qBAAqB,CAAC,CAAA;IAC7B,WAAA,0BAAgB,CAAC,mCAAY,CAAC,CAAA;6CAA0C,oBAAU;GAJ9E,mBAAmB,CA4D/B;AA5DY,kDAAmB","file":"store.setting.service.js","sourcesContent":["import { OutputStoreSetting } from \"../interface/storesetting/store.setting.data\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { StoreComponent } from \"../interface/store.component\";\nimport { StoreSetting } from \"../model/store.setting.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { Request } from \"express\";\n\n/* 商城设置的服务组件 */\n@Injectable()\nexport class StoreSettingService {\n\n    constructor(\n        @Inject(\"StoreComponentToken\") private readonly storeComponent: StoreComponent,\n        @InjectRepository(StoreSetting) private readonly storeSettingRepository: Repository<StoreSetting>\n    ) { }\n\n    async getStoreSetting(req: Request): Promise<OutputStoreSetting> {\n        const storeSetting: any = await this.storeSettingRepository.findOne(1);\n        if (!storeSetting) {\n            throw new HttpException(\"商城配置不存在\", 404);\n        }\n        storeSetting.logoUrl = await this.storeComponent.getUrl(req, storeSetting.logoBucketName, storeSetting.logoName, storeSetting.logoType, undefined);\n        return storeSetting;\n    }\n\n    async saveStoreSetting(\n        logoBucketName: string,\n        logoRawName: string,\n        logoBase64: string,\n        title: string,\n        region: string,\n        address: string,\n        close: boolean,\n        closeReason: string,\n        servicePhone: string\n    ): Promise<void> {\n        const { bucketName, name, type } = await this.storeComponent.upload(logoBucketName, logoRawName, logoBase64, undefined);\n        try {\n            const setting: StoreSetting = this.storeSettingRepository.create({\n                id: 1,\n                logoBucketName: bucketName,\n                logoName: name,\n                logoType: type,\n                title,\n                region,\n                address,\n                close,\n                closeReason,\n                servicePhone\n            });\n            await this.storeSettingRepository.save(setting);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async clearStoreSetting(): Promise<void> {\n        const setting: StoreSetting | undefined = await this.storeSettingRepository.findOne(1);\n        if (!setting) {\n            throw new HttpException(\"商城设置不存在\", 404);\n        }\n        try {\n            await this.storeComponent.delete(setting.logoBucketName, setting.logoName, setting.logoType);\n            await this.storeSettingRepository.remove(setting);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n}\n"]}