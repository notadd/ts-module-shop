{"version":3,"sources":["service/evaluation.service.ts"],"names":[],"mappings":"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","file":"evaluation.service.js","sourcesContent":["import { InputEvaluationImage } from \"../interface/evaluation/input.evaluation.image\";\nimport { UserComponent, UserComponentToken, User } from \"@notadd/user\";\nimport { EvaluationImage } from \"../model/evaluation.image.entity\";\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { StoreComponent } from \"../interface/store.component\";\nimport { Repository, Connection, QueryRunner } from \"typeorm\";\nimport { Evaluation } from \"../model/evaluation.entity\";\nimport { OrderItem } from \"../model/order.item.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Goods } from \"../model/goods.entity\";\n\n/* 评价的服务组件 */\n@Injectable()\nexport class EvaluationService {\n\n    constructor(\n        @Inject(Connection) private readonly connection: Connection,\n        @Inject(UserComponentToken) private readonly userComponent: UserComponent,\n        @InjectRepository(Goods) private readonly goodsRepository: Repository<Goods>,\n        @Inject(\"StoreComponentToken\") private readonly storeComponent: StoreComponent,\n        @InjectRepository(OrderItem) private readonly orderItemRepository: Repository<OrderItem>,\n        @InjectRepository(Evaluation) private readonly evaluationRepository: Repository<Evaluation>,\n        @InjectRepository(EvaluationImage) private readonly evaluationImageRepository: Repository<EvaluationImage>\n    ) { }\n\n    async getEvaluation(id: number): Promise<Evaluation> {\n        const evaluation: Evaluation | undefined = await this.evaluationRepository.createQueryBuilder(\"evaluation\")\n            .leftJoinAndSelect(\"evaluation.orderItem\", \"orderItem\")\n            .where({ id })\n            .getOne();\n        if (!evaluation) {\n            throw new HttpException(\"指定id=\" + id + \"评价不存在\", 404);\n        }\n        return evaluation;\n    }\n\n    async getEvaluations(goodsId: number): Promise<Array<Evaluation>> {\n        /* 这里的查询暂时不确定是否准确 */\n        const goods: Goods | undefined = await this.goodsRepository.createQueryBuilder(\"goods\")\n            .loadRelationIdAndMap(\"skuIds\", \"goods.skus\")\n            .where({ id: goodsId })\n            .getOne();\n        const orderItems: Array<OrderItem> | undefined = await this.orderItemRepository.createQueryBuilder(\"orderItem\")\n            .where(`orderItem.skuId in (${(goods as any).skuIds.join(\",\")})`)\n            .innerJoinAndSelect(\"orderItem.evaluation\", \"evaluation\")\n            .getMany();\n        const evaluations: Array<Evaluation> | undefined = orderItems.map(orderItem => {\n            orderItem.evaluation.orderItem = orderItem;\n            return orderItem.evaluation;\n        });\n        return evaluations;\n    }\n\n    async createEvaluation(content: string, userId: number, orderItemId: number, inputImages: Array<InputEvaluationImage>): Promise<void> {\n        const user: User | undefined = await this.userComponent.getUserById(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 404);\n        }\n        const orderItem: OrderItem | undefined = await this.orderItemRepository.findOne(orderItemId);\n        if (!orderItem) {\n            throw new HttpException(\"指定id=\" + orderItemId + \"订单项不存在\", 404);\n        }\n        /*\n        一个订单项只有所属用户可以评价，且一个订单项只能评价一次\n        按理说，一个订单只有当交易成功后才可以评价，但是目前订单状态还没有定义\n        */\n        if (orderItem.userId !== userId) {\n            throw new HttpException(\"指定id=\" + orderItemId + \"订单项不属于当前用户，不能评价\", 404);\n        }\n        if (orderItem.evaluation) {\n            throw new HttpException(\"指定id=\" + orderItemId + \"订单项已经评价，不能再次评价\", 404);\n        }\n        const images: Array<EvaluationImage> = new Array();\n        for (let i = 0; i < inputImages.length; i++) {\n            const { bucketName, name, type } = await this.storeComponent.upload(inputImages[i].bucketName, inputImages[i].rawName, inputImages[i].base64, undefined);\n            images.push(this.evaluationImageRepository.create({ bucketName, name, type }));\n        }\n        const queryRunner: QueryRunner = this.connection.createQueryRunner(\"master\");\n        await queryRunner.startTransaction();\n        try {\n            const evaluation: Evaluation | undefined = await queryRunner.manager.save(\n                this.evaluationRepository.create({ content, display: true, user, orderItem, images })\n            );\n            images.forEach(image => image.evaluation = evaluation);\n            await queryRunner.manager.save(images);\n            await queryRunner.commitTransaction();\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    async updateEvaluation(id: number, content: string, display: boolean): Promise<void> {\n        const evaluation: Evaluation | undefined = await this.evaluationRepository.findOne(id);\n        if (!evaluation) {\n            throw new HttpException(\"指定id=\" + id + \"评价不存在\", 404);\n        }\n        try {\n            evaluation.content = content;\n            evaluation.display = display;\n            await this.evaluationRepository.save(evaluation);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteEvaluation(id: number): Promise<void> {\n        const evaluation: Evaluation | undefined = await this.evaluationRepository.findOne(id, { relations: [\"images\"] });\n        if (!evaluation) {\n            throw new HttpException(\"指定id=\" + id + \"评价不存在\", 404);\n        }\n        for (let i = 0; i < evaluation.images.length; i++) {\n            const { bucketName, name, type }: EvaluationImage = evaluation.images[i];\n            await this.storeComponent.delete(bucketName, name, type);\n        }\n        try {\n            /* 删除评价时会级联删除EvaluationImage实体 */\n            await this.evaluationRepository.remove(evaluation);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}