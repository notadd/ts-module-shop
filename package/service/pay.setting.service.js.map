{"version":3,"sources":["service/pay.setting.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,oEAAyD;AACzD,6CAAmD;AACnD,qCAAqC;AAIrC,IAAa,iBAAiB,GAA9B;IAEI,YACmD,oBAA4C;QAA5C,yBAAoB,GAApB,oBAAoB,CAAwB;IAC3F,CAAC;IAEC,aAAa;;YACf,MAAM,UAAU,GAA2B,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,sBAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;aAC3C;YACD,OAAO,UAAU,CAAC;QACtB,CAAC;KAAA;IAEK,cAAc,CAAC,MAAe,EAAE,SAAkB;;YACpD,MAAM,UAAU,GAAe,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;YAC9F,IAAI;gBACA,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACpD;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;IAEK,eAAe;;YACjB,MAAM,UAAU,GAA2B,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,sBAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;aAC3C;YACD,IAAI;gBACA,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACtD;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;CACJ,CAAA;AAlCY,iBAAiB;IAD7B,mBAAU,EAAE;IAIJ,WAAA,0BAAgB,CAAC,+BAAU,CAAC,CAAA;qCAAwC,oBAAU;GAH1E,iBAAiB,CAkC7B;AAlCY,8CAAiB","file":"pay.setting.service.js","sourcesContent":["import { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { PaySetting } from \"../model/pay.setting.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\n/* 支付配置服务组件 */\n@Injectable()\nexport class PaySettingService {\n\n    constructor(\n        @InjectRepository(PaySetting) private readonly paySettingRepository: Repository<PaySetting>\n    ) { }\n\n    async getPaySetting(): Promise<PaySetting> {\n        const paySetting: PaySetting | undefined = await this.paySettingRepository.findOne(1);\n        if (!paySetting) {\n            throw new HttpException(\"支付配置不存在\", 404);\n        }\n        return paySetting;\n    }\n\n    async savePaySetting(aliPay: boolean, weixinPay: boolean): Promise<void> {\n        const paySetting: PaySetting = this.paySettingRepository.create({ id: 1, aliPay, weixinPay });\n        try {\n            await this.paySettingRepository.save(paySetting);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async clearPaySetting(): Promise<void> {\n        const paySetting: PaySetting | undefined = await this.paySettingRepository.findOne(1);\n        if (!paySetting) {\n            throw new HttpException(\"支付配置不存在\", 404);\n        }\n        try {\n            await this.paySettingRepository.remove(paySetting);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}