{"version":3,"sources":["service/sku.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,0EAA+D;AAC/D,6CAAmD;AACnD,wDAA8C;AAC9C,oDAA0C;AAC1C,qCAAqC;AAIrC,IAAa,UAAU,GAAvB;IAEI,YAC4C,aAA8B,EAC5B,eAAkC,EAC1B,uBAAkD;QAF5D,kBAAa,GAAb,aAAa,CAAiB;QAC5B,oBAAe,GAAf,eAAe,CAAmB;QAC1B,4BAAuB,GAAvB,uBAAuB,CAA2B;IACpG,CAAC;IAEC,OAAO,CAAC,OAAe;;YACzB,MAAM,KAAK,GAAsB,MAAM,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,OAAO,CAAC;iBAClF,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC;iBACtB,iBAAiB,CAAC,YAAY,EAAE,KAAK,CAAC;iBACtC,iBAAiB,CAAC,YAAY,EAAE,OAAO,CAAC;iBACxC,iBAAiB,CAAC,gBAAgB,EAAE,UAAU,CAAC;iBAC/C,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,KAAK,EAAE;gBACR,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC7D;YACD,OAAO,KAAK,CAAC,IAAI,CAAC;QACtB,CAAC;KAAA;IAEK,SAAS,CAAC,OAAe,EAAE,EAAU,EAAE,SAAiB,EAAE,gBAA+B;;YAC3F,MAAM,KAAK,GAAsB,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7E,IAAI,CAAC,KAAK,EAAE;gBACR,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC7D;YACD,MAAM,MAAM,GAAqC,MAAM,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YACtJ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9C,MAAM,IAAI,GAA8B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/F,IAAI,CAAC,IAAI,EAAE;oBACP,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;iBAC1E;gBACD,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE;oBAC5B,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,cAAc,GAAG,KAAK,CAAC,EAAE,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;iBACpG;gBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;oBAChC,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,iCAAiC,EAAE,GAAG,CAAC,CAAC;iBACnG;aACJ;YACD,IAAI;gBACA,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;aACnE;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;IAEK,SAAS,CAAC,EAAU,EAAE,EAAU,EAAE,SAAiB,EAAE,gBAA+B;;YACtF,MAAM,GAAG,GAAoB,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YACtG,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;aACzD;YACD,IAAI,EAAE,EAAE;gBACJ,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC;aACf;YACD,IAAI,SAAS,EAAE;gBACX,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;aAC7B;YACD,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnD,MAAM,MAAM,GAAqC,MAAM,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;gBACtJ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC9C,MAAM,IAAI,GAA8B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/F,IAAI,CAAC,IAAI,EAAE;wBACP,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;qBAC1E;oBACD,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE;wBAChC,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,cAAc,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;qBACxG;oBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;wBAChC,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,iCAAiC,EAAE,GAAG,CAAC,CAAC;qBACnG;iBACJ;gBACD,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;aACvB;YACD,IAAI;gBACA,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACtC;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;IAEK,SAAS,CAAC,EAAU;;YACtB,MAAM,GAAG,GAAoB,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC7F,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;aACzD;YACD,IAAI;gBACA,GAAG,CAAC,MAAM,GAAG,SAAgB,CAAC;gBAC9B,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnC,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACxC;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC7D;QACL,CAAC;KAAA;CACJ,CAAA;AA7FY,UAAU;IADtB,mBAAU,EAAE;IAIJ,WAAA,0BAAgB,CAAC,gBAAG,CAAC,CAAA;IACrB,WAAA,0BAAgB,CAAC,oBAAK,CAAC,CAAA;IACvB,WAAA,0BAAgB,CAAC,qCAAa,CAAC,CAAA;qCAFuB,oBAAU;QACN,oBAAU;QACM,oBAAU;GALhF,UAAU,CA6FtB;AA7FY,gCAAU","file":"sku.service.js","sourcesContent":["import { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { PropertyValue } from \"../model/property.value.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Goods } from \"../model/goods.entity\";\nimport { Sku } from \"../model/sku.entity\";\nimport { Repository } from \"typeorm\";\n\n/* 品牌的服务组件 */\n@Injectable()\nexport class SkuService {\n\n    constructor(\n        @InjectRepository(Sku) private readonly skuRepository: Repository<Sku>,\n        @InjectRepository(Goods) private readonly goodsRepository: Repository<Goods>,\n        @InjectRepository(PropertyValue) private readonly propertyValueRepository: Repository<PropertyValue>\n    ) { }\n\n    async getSkus(goodsId: number): Promise<Array<Sku>> {\n        const goods: Goods | undefined = await this.goodsRepository.createQueryBuilder(\"goods\")\n            .where({ id: goodsId })\n            .leftJoinAndSelect(\"goods.skus\", \"sku\")\n            .leftJoinAndSelect(\"sku.values\", \"value\")\n            .leftJoinAndSelect(\"value.property\", \"property\")\n            .getOne();\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        return goods.skus;\n    }\n\n    async createSku(goodsId: number, no: string, inventory: number, propertyValueIds: Array<number>): Promise<void> {\n        const goods: Goods | undefined = await this.goodsRepository.findOne(goodsId);\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + goodsId + \"商品不存在\", 404);\n        }\n        const values: Array<PropertyValue> | undefined = await this.propertyValueRepository.findByIds(propertyValueIds, { relations: [\"property\", \"goods\"] });\n        for (let i = 0; i < propertyValueIds.length; i++) {\n            const find: PropertyValue | undefined = values.find(value => value.id === propertyValueIds[i]);\n            if (!find) {\n                throw new HttpException(\"指定id=\" + propertyValueIds[i] + \"属性值不存在\", 404);\n            }\n            if (find.goods.id !== goods.id) {\n                throw new HttpException(\"指定id=\" + propertyValueIds[i] + \"属性值不存在于指定id=\" + goods.id + \"商品之下\", 404);\n            }\n            if (find.property.type !== \"radio\") {\n                throw new HttpException(\"指定id=\" + propertyValueIds[i] + \"属性值的属性不是单选类型，只有单选类型属性值可以作为sku添加\", 404);\n            }\n        }\n        try {\n            await this.skuRepository.save({ no, inventory, goods, values });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateSku(id: number, no: string, inventory: number, propertyValueIds: Array<number>): Promise<void> {\n        const sku: Sku | undefined = await this.skuRepository.findOne(id, { relations: [\"goods\", \"values\"] });\n        if (!sku) {\n            throw new HttpException(\"指定id=\" + id + \"Sku不存在\", 404);\n        }\n        if (no) {\n            sku.no = no;\n        }\n        if (inventory) {\n            sku.inventory = inventory;\n        }\n        if (propertyValueIds && propertyValueIds.length !== 0) {\n            const values: Array<PropertyValue> | undefined = await this.propertyValueRepository.findByIds(propertyValueIds, { relations: [\"property\", \"goods\"] });\n            for (let i = 0; i < propertyValueIds.length; i++) {\n                const find: PropertyValue | undefined = values.find(value => value.id === propertyValueIds[i]);\n                if (!find) {\n                    throw new HttpException(\"指定id=\" + propertyValueIds[i] + \"属性值不存在\", 404);\n                }\n                if (find.goods.id !== sku.goods.id) {\n                    throw new HttpException(\"指定id=\" + propertyValueIds[i] + \"属性值不存在于指定id=\" + sku.goods.id + \"商品之下\", 404);\n                }\n                if (find.property.type !== \"radio\") {\n                    throw new HttpException(\"指定id=\" + propertyValueIds[i] + \"属性值的属性不是单选类型，只有单选类型属性值可以作为sku添加\", 404);\n                }\n            }\n            sku.values = values;\n        }\n        try {\n            await this.skuRepository.save(sku);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteSku(id: number): Promise<void> {\n        const sku: Sku | undefined = await this.skuRepository.findOne(id, { relations: [\"values\"] });\n        if (!sku) {\n            throw new HttpException(\"指定id=\" + id + \"Sku不存在\", 404);\n        }\n        try {\n            sku.values = undefined as any;\n            await this.skuRepository.save(sku);\n            await this.skuRepository.remove(sku);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}