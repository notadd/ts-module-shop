{"version":3,"sources":["service/floor.service.ts"],"names":[],"mappings":"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","file":"floor.service.js","sourcesContent":["import { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Floor } from \"../model/floor.entity\";\nimport { Goods } from \"../model/goods.entity\";\nimport { Repository } from \"typeorm\";\nimport { Request } from \"express\";\n\n/* 楼层的服务组件 */\n@Injectable()\nexport class FloorService {\n\n    constructor(\n        @InjectRepository(Goods) private readonly goodsRepository: Repository<Goods>,\n        @InjectRepository(Floor) private readonly floorRepository: Repository<Floor>\n    ) { }\n\n    async getFloors(): Promise<Array<Floor>> {\n        const floors: Array<Floor> | undefined = await this.floorRepository.find();\n        return floors;\n    }\n\n    async getFloor(id: number): Promise<Floor> {\n        const floor: Floor | undefined = await this.floorRepository.createQueryBuilder(\"floor\")\n            .leftJoinAndSelect(\"floor.goodses\", \"goods\")\n            .where({ id })\n            .getOne();\n        if (!floor) {\n            throw new HttpException(\"指定id=\" + id + \"楼层不存在\", 404);\n        }\n        return floor;\n    }\n\n    async createFloor(name: string, display: boolean, goodsIds: Array<number>): Promise<void> {\n        const exist: Floor | undefined = await this.floorRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定name=\" + name + \"楼层已存在\", 404);\n        }\n        const goodses: Array<Goods> | undefined = await this.goodsRepository.findByIds(goodsIds);\n        for (let i = 0; i < goodsIds.length; i++) {\n            const find: Goods | undefined = goodses.find(goods => goods.id === goodsIds[i]);\n            if (!find) {\n                throw new HttpException(\"指定id=\" + goodsIds[i] + \"商品未找到\", 404);\n            }\n        }\n        try {\n            await this.floorRepository.save({ name, display, goodses });\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateFloor(id: number, name: string, display: boolean, goodsIds: Array<number>): Promise<void> {\n        const floor: Floor | undefined = await this.floorRepository.findOne(id);\n        if (!floor) {\n            throw new HttpException(\"指定id=\" + id + \"楼层不存在\", 404);\n        }\n        if (floor.name !== name) {\n            const exist: Floor | undefined = await this.floorRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"楼层已存在\", 404);\n            }\n            floor.name = name;\n        }\n        floor.display = display;\n        const goodses: Array<Goods> | undefined = await this.goodsRepository.findByIds(goodsIds);\n        for (let i = 0; i < goodsIds.length; i++) {\n            const find: Goods | undefined = goodses.find(goods => goods.id === goodsIds[i]);\n            if (!find) {\n                throw new HttpException(\"指定id=\" + goodsIds[i] + \"商品未找到\", 404);\n            }\n        }\n        floor.goodses = goodses;\n        try {\n            await this.floorRepository.save(floor);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteFloor(id: number): Promise<void> {\n        const floor: Floor | undefined = await this.floorRepository.findOne(id);\n        if (!floor) {\n            throw new HttpException(\"指定id=\" + id + \"楼层不存在\", 404);\n        }\n        try {\n            await this.floorRepository.remove(floor);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n}\n"]}