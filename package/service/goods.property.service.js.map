{"version":3,"sources":["service/goods.property.service.ts"],"names":[],"mappings":"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","file":"goods.property.service.js","sourcesContent":["import { Injectable, Inject, HttpException } from \"@nestjs/common\";\nimport { GoodsProperty } from \"../model/goods.property.entity\";\nimport { Repository, QueryRunner, Connection } from \"typeorm\";\nimport { GoodsType } from \"../model/goods.type.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\n@Injectable()\nexport class GoodsPropertyService {\n\n    constructor(\n        @Inject(Connection) private readonly connection: Connection,\n        @InjectRepository(GoodsType) private readonly goodsTypeRepository: Repository<GoodsType>,\n        @InjectRepository(GoodsProperty) private readonly goodsPropertyRepository: Repository<GoodsProperty>\n    ) { }\n\n    async createGoodsProperty(goodsTypeId: number, name: string, type: string, inputType: string, list: Array<string>): Promise<void> {\n        const goodsType: GoodsType|undefined = await this.goodsTypeRepository.findOne(goodsTypeId);\n        if (!goodsType) {\n            throw new HttpException(\"指定id=\" + goodsTypeId + \"商品类型不存在\", 404);\n        }\n        const exist: GoodsProperty|undefined = await this.goodsPropertyRepository.findOne({ name, goodsType });\n        if (exist) {\n            throw new HttpException(\"指定id\" + goodsTypeId + \"商品类型下已存在name=\" + name + \"商品属性\", 404);\n        }\n        const goodsProperty: GoodsProperty = this.goodsPropertyRepository.create({ name, type, inputType, goodsType });\n        if (inputType === \"list\") {\n            goodsProperty.list = list;\n        }\n        try {\n            await this.goodsPropertyRepository.save(goodsProperty);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async updateGoodsProperty(id: number, name: string, type: string, inputType: string, list: Array<string>): Promise<void> {\n        const goodsProperty: GoodsProperty|undefined = await this.goodsPropertyRepository.findOne(id, { relations: [\"goodsType\", \"values\"] });\n        if (!goodsProperty) {\n            throw new HttpException(\"指定id=\" + id + \"商品属性不存在\", 404);\n        }\n        let ischange = false;\n        if (name && name !== goodsProperty.name) {\n            const exist: GoodsProperty|undefined = await this.goodsPropertyRepository.findOne({ name, goodsType: goodsProperty.goodsType });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"商品属性已存在于所属商品类型下\", 404);\n            }\n            goodsProperty.name = name;\n            ischange = true;\n        }\n        if (type && goodsProperty.type !== type) {\n            goodsProperty.type = type;\n            ischange = true;\n        }\n        if (inputType && goodsProperty.inputType !== inputType) {\n            goodsProperty.inputType = inputType;\n            ischange = true;\n        }\n        if (goodsProperty.inputType === \"list\") {\n            goodsProperty.list.forEach(item => {\n                const find = list.find(i => {\n                    return i === item;\n                });\n                if (!find) {\n                    ischange = true;\n                }\n            });\n            goodsProperty.list = list;\n        } else {\n            goodsProperty.list = [];\n        }\n        const queryRunner: QueryRunner = this.connection.createQueryRunner(\"master\");\n        try {\n            await queryRunner.startTransaction();\n            if (ischange) {\n                await queryRunner.manager.remove(goodsProperty.values);\n            }\n            await queryRunner.manager.save(goodsProperty);\n            await queryRunner.commitTransaction();\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n\n    async deleteGoodsProperty(id: number): Promise<void> {\n        const goodsProperty: GoodsProperty|undefined = await this.goodsPropertyRepository.findOne(id, { relations: [\"goodsType\"] });\n        if (!goodsProperty) {\n            throw new HttpException(\"指定id=\" + id + \"商品属性不存在\", 404);\n        }\n        try {\n            await this.goodsPropertyRepository.remove(goodsProperty);\n        } catch (err) {\n            throw new HttpException(\"发生了数据库错误\" + err.toString(), 403);\n        }\n    }\n}\n"]}