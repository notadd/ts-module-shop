{"version":3,"sources":["resolver/member.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA4E;AAC5E,2CAAwE;AAGxE,6CAA4D;AAC5D,8DAA0D;AAO1D,IAAa,cAAc,GAA3B;IAEI,YAC4C,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IACpE,CAAC;IAGC,OAAO,CAAC,GAAY;;YACtB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;YACtD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;QACvD,CAAC;KAAA;IAGK,MAAM,CAAC,GAAY,EAAE,IAAoB;;YAC3C,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YACtD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;QACxD,CAAC;KAAA;IAGK,YAAY,CAAC,GAAY,EAAE,IAShC;;YACG,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;YACvF,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,EAAE;gBAC7F,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;YAC7G,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAGK,YAAY,CAAC,GAAY,EAAE,IAOhC;;YACG,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;YACjE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,EAAE;gBACjE,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;YACvF,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAGK,YAAY,CAAC,GAAY,EAAE,IAAoB;;YACjD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAC1C,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;CAEJ,CAAA;AA7DG;IADC,eAAK,CAAC,SAAS,CAAC;;;;6CAIhB;AAGD;IADC,eAAK,CAAC,QAAQ,CAAC;;;;4CAQf;AAGD;IADC,kBAAQ,CAAC,cAAc,CAAC;;;;kDAiBxB;AAGD;IADC,kBAAQ,CAAC,cAAc,CAAC;;;;kDAexB;AAGD;IADC,kBAAQ,CAAC,cAAc,CAAC;;;;kDAQxB;AAlEQ,cAAc;IAF1B,kBAAQ,CAAC,QAAQ,CAAC;IAClB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,8BAAa,CAAC,CAAA;qCAAiC,8BAAa;GAH/D,cAAc,CAoE1B;AApEY,wCAAc","file":"member.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { MembersData } from \"../interface/member/members.data\";\nimport { MemberData } from \"../interface/member/member.data\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { MemberService } from \"../service/member.service\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 会员Resolver */\n@Resolver(\"Member\")\n@UseInterceptors(ExceptionInterceptor)\nexport class MemberResolver {\n\n    constructor(\n        @Inject(MemberService) private readonly memberService: MemberService\n    ) { }\n\n    @Query(\"members\")\n    async members(req: Request): Promise<MembersData> {\n        const members = await this.memberService.getMembers();\n        return { code: 200, message: \"获取所有会员成功\", members };\n    }\n\n    @Query(\"member\")\n    async member(req: Request, body: { id: number }): Promise<MemberData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        const member = await this.memberService.getMember(id);\n        return { code: 200, message: \"获取指定id会员成功\", member };\n    }\n\n    @Mutation(\"createMember\")\n    async createMember(req: Request, body: {\n        name: string,\n        realName: string,\n        email: string,\n        sex: string,\n        idNumber: string,\n        birthday: string,\n        password: string,\n        mobilePhone: string\n    }): Promise<Data> {\n        const { name, realName, email, sex, idNumber, birthday, password, mobilePhone } = body;\n        if (!name || !realName || !email || !sex || !idNumber || !birthday || !password || !mobilePhone) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.memberService.createMember(name, realName, email, sex, idNumber, birthday, password, mobilePhone);\n        return { code: 200, message: \"创建会员成功\" };\n    }\n\n    @Mutation(\"updateMember\")\n    async updateMember(req: Request, body: {\n        id: number,\n        email: string,\n        sex: string,\n        birthday: string,\n        password: string,\n        mobilePhone: string\n    }): Promise<Data> {\n        const { id, email, sex, birthday, password, mobilePhone } = body;\n        if (!id || !email || !sex || !birthday || !password || !mobilePhone) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.memberService.updateMember(id, email, sex, birthday, password, mobilePhone);\n        return { code: 200, message: \"更新会员成功\" };\n    }\n\n    @Mutation(\"deleteMember\")\n    async deleteMember(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.memberService.deleteMember(id);\n        return { code: 200, message: \"删除会员成功\" };\n    }\n\n}\n"]}