{"version":3,"sources":["resolver/property.value.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,8EAAyE;AACzE,2CAAwE;AAExE,6CAA4D;AAM5D,IAAa,qBAAqB,GAAlC;IAEI,YACmD,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;IACzF,CAAC;IAIC,cAAc,CAAC,GAAY,EAAE,IAAyB;;YACxD,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,OAAO,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,MAAM,GAAyB,MAAM,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAChG,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,gBAAgB,EAAE,MAAM,EAAE,CAAC;QAC5D,CAAC;KAAA;IAOK,mBAAmB,CAAC,GAAY,EAAE,IAAgF;;YACpH,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YACxD,IAAI,CAAC,OAAO,IAAI,CAAC,eAAe,IAAI,CAAC,KAAK,EAAE;gBACxC,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5F,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QAC7C,CAAC;KAAA;IAIK,mBAAmB,CAAC,GAAY,EAAE,IAAkD;;YACtF,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACtE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QAC7C,CAAC;KAAA;IAIK,mBAAmB,CAAC,GAAY,EAAE,IAAoB;;YACxD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACxD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QAC7C,CAAC;KAAA;CACJ,CAAA;AA5CG;IADC,eAAK,CAAC,gBAAgB,CAAC;;;;2DAQvB;AAOD;IADC,kBAAQ,CAAC,qBAAqB,CAAC;;;;gEAQ/B;AAID;IADC,kBAAQ,CAAC,qBAAqB,CAAC;;;;gEAQ/B;AAID;IADC,kBAAQ,CAAC,qBAAqB,CAAC;;;;gEAQ/B;AAnDQ,qBAAqB;IADjC,kBAAQ,CAAC,eAAe,CAAC;IAIjB,WAAA,eAAM,CAAC,6CAAoB,CAAC,CAAA;qCAAwC,6CAAoB;GAHpF,qBAAqB,CAoDjC;AApDY,sDAAqB","file":"property.value.resolver.js","sourcesContent":["import { PropertyValuesData } from \"../interface/propertyvalue/property.values.data\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { PropertyValueService } from \"../service/property.value.service\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { PropertyValue } from \"../model/property.value.entity\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 属性值的Resolver,属性值的查询在商品详情里面，获取单个商品时会获取其关联属性值 */\n@Resolver(\"PropertyValue\")\nexport class PropertyValueResolver {\n\n    constructor(\n        @Inject(PropertyValueService) private readonly propertyValueService: PropertyValueService\n    ) { }\n\n    /* 获取指定商品的所有属性值，并关联获取属性值的属性 */\n    @Query(\"propertyValues\")\n    async propertyValues(req: Request, body: { goodsId: number }): Promise<PropertyValuesData> {\n        const { goodsId } = body;\n        if (!goodsId) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        const values: Array<PropertyValue> = await this.propertyValueService.getPropertyValues(goodsId);\n        return { code: 200, message: \"获取指定商品的所有属性值成功\", values };\n    }\n\n    /* 添加指定商品、指定属性的一个属性值，规则为\n    指定属性从属于指定商品的商品类型，不能是随意属性\n    唯一属性不需要传递价格，单选、复选属性需要价格，也就是价格与属性类型有关\n    当录入类型是list时，value必须被list包含，不能是随意值，也就是属性值与属性的输入类型有关*/\n    @Mutation(\"createPropertyValue\")\n    async createPropertyValue(req: Request, body: { goodsId: number, goodsPropertyId: number, value: string, price: number }): Promise<Data> {\n        const { goodsId, goodsPropertyId, value, price } = body;\n        if (!goodsId || !goodsPropertyId || !value) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.propertyValueService.createPropertyValue(goodsId, goodsPropertyId, value, price);\n        return { code: 200, message: \"创建属性值成功\" };\n    }\n\n    /* 更新指定id属性值，只能更新属性值与价格 */\n    @Mutation(\"updatePropertyValue\")\n    async updatePropertyValue(req: Request, body: { id: number, value: string, price: number }): Promise<Data> {\n        const { id, value, price } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.propertyValueService.updatePropertyValue(id, value, price);\n        return { code: 200, message: \"更新属性值成功\" };\n    }\n\n    /* 删除指定id属性值，不管是唯一属性、单选、复选属性都可以删除 */\n    @Mutation(\"deletePropertyValue\")\n    async deletePropertyValue(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.propertyValueService.deletePropertyValue(id);\n        return { code: 200, message: \"删除属性值成功\" };\n    }\n}\n"]}