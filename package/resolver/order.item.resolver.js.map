{"version":3,"sources":["resolver/order.item.resolver.ts"],"names":[],"mappings":"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","file":"order.item.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { CartItemsData } from \"../interface/orderitem/cart.items.data\";\nimport { OrderItemData } from \"../interface/orderitem/order.item.data\";\nimport { OrderItemService } from \"../service/order.item.service\";\nimport { Resolver, Mutation, Query } from \"@nestjs/graphql\";\nimport { Order } from \"../model/order.entity\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 订单项Resolver */\n@Resolver(\"OrderItem\")\n@UseInterceptors(ExceptionInterceptor)\nexport class OrderItemResolver {\n\n    constructor(\n        @Inject(OrderItemService) private readonly orderItemService: OrderItemService\n    ) { }\n\n    @Query(\"cartItems\")\n    async cartItems(req: Request, body: { userId: number }): Promise<CartItemsData> {\n        const { userId } = body;\n        if (!userId) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        const cartItems = await this.orderItemService.findCartItems(userId);\n        return { code: 200, message: \"获取指定用户购物车订单项成功\", cartItems };\n    }\n\n    @Query(\"orderItem\")\n    async orderItem(req: Request, body: { id: number }): Promise<OrderItemData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const orderItem = await this.orderItemService.findOrderItem(id);\n        return { code: 200, message: \"获取指定id订单项成功\", orderItem };\n    }\n\n    @Mutation(\"createOrderItem\")\n    async createOrderItem(req: Request, body: { count: number, skuId: number, userId: number }): Promise<Data> {\n        const { count, skuId, userId } = body;\n        if (!count || !skuId || !userId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (count <= 0) {\n            throw new HttpException(\"商品数量必须大于0\", 400);\n        }\n        await this.orderItemService.createOrderItem(count, skuId, userId);\n        return { code: 200, message: \"创建订单项成功\" };\n    }\n\n    @Mutation(\"updateOrderItem\")\n    async updateOrderItem(req: Request, body: { id: number, count: number }): Promise<Data> {\n        const { id, count } = body;\n        if (!id || !count) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (count <= 0) {\n            throw new HttpException(\"商品数量必须大于0\", 400);\n        }\n        await this.orderItemService.updateOrderItem(id, count);\n        return { code: 200, message: \"更新订单项成功\" };\n    }\n\n    @Mutation(\"deleteOrderItem\")\n    async deleteOrderItem(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.orderItemService.deleteOrderItem(id);\n        return { code: 200, message: \"删除订单项成功\" };\n    }\n}\n"]}