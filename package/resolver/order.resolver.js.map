{"version":3,"sources":["resolver/order.resolver.ts"],"names":[],"mappings":"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","file":"order.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { OrdersData } from \"../interface/order/orders.data\";\nimport { Resolver, Mutation, Query } from \"@nestjs/graphql\";\nimport { OrderData } from \"../interface/order/order.data\";\nimport { OrderService } from \"../service/order.service\";\nimport { Order } from \"../model/order.entity\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 订单Resolver */\n@Resolver(\"Order\")\n@UseInterceptors(ExceptionInterceptor)\nexport class OrderResolver {\n\n    constructor(\n        @Inject(OrderService) private readonly orderService: OrderService\n    ) { }\n\n    @Query(\"order\")\n    async order(req: Request, body: { id: number }): Promise<OrderData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        const order = await this.orderService.getOrder(id);\n        return { code: 200, message: \"获取指定订单成功\", order };\n    }\n\n    @Query(\"orders\")\n    async orders(req: Request): Promise<OrdersData> {\n        const orders = await this.orderService.getOrders();\n        return { code: 200, message: \"获取所有订单成功\", orders };\n    }\n\n    @Mutation(\"createOrder\")\n    async createOrder(req: Request, body: {\n        userId: number,\n        delivertNo: string,\n        delivertTime: string,\n        invoiceType: string,\n        invoiceContent: string,\n        invoiceTitle: string,\n        customerMessage: string,\n        deliveryId: number,\n        userReceivingInformationId: number,\n        items: Array<{ skuId: number, count: number }>\n    }): Promise<Data> {\n        const { userId, delivertNo, delivertTime, invoiceType, invoiceContent, invoiceTitle, customerMessage, deliveryId, userReceivingInformationId, items } = body;\n        if (!userId || !delivertNo || !delivertTime || !invoiceType || !invoiceContent || !invoiceTitle || !customerMessage || !deliveryId || !userReceivingInformationId || !items || items.length === 0) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.orderService.createOrder(userId, delivertNo, delivertTime, invoiceType, invoiceContent, invoiceTitle, customerMessage, deliveryId, userReceivingInformationId, items);\n        return { code: 200, message: \"创建订单成功\" };\n    }\n\n    @Mutation(\"createOrderFromCart\")\n    async createOrderFromCart(req: Request, body: {\n        userId: number,\n        delivertNo: string,\n        delivertTime: string,\n        invoiceType: string,\n        invoiceContent: string,\n        invoiceTitle: string,\n        customerMessage: string,\n        deliveryId: number,\n        userReceivingInformationId: number,\n        itemIds: Array<number>\n    }): Promise<Data> {\n        const { userId, delivertNo, delivertTime, invoiceType, invoiceContent, invoiceTitle, customerMessage, deliveryId, userReceivingInformationId, itemIds } = body;\n        if (!userId || !delivertNo || !delivertTime || !invoiceType || !invoiceContent || !invoiceTitle || !customerMessage || !deliveryId || !userReceivingInformationId || !itemIds || itemIds.length === 0) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.orderService.createOrderFromCart(userId, delivertNo, delivertTime, invoiceType, invoiceContent, invoiceTitle, customerMessage, deliveryId, userReceivingInformationId, itemIds);\n        return { code: 200, message: \"从购物车创建订单成功\" };\n    }\n\n    @Mutation(\"updateOrder\")\n    async updateOrder(req: Request, body: {\n        id: number,\n        delivertNo: string,\n        delivertTime: string,\n        invoiceType: string,\n        invoiceContent: string,\n        invoiceTitle: string,\n        customerMessage: string,\n        deliveryId: number,\n        userReceivingInformationId: number\n    }): Promise<Data> {\n        const { id, delivertNo, delivertTime, invoiceType, invoiceContent, invoiceTitle, customerMessage, deliveryId, userReceivingInformationId } = body;\n        if (!id || !delivertNo || !delivertTime || !invoiceType || !invoiceContent || !invoiceTitle || !customerMessage || !deliveryId || !userReceivingInformationId) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.orderService.updateOrder(id, delivertNo, delivertTime, invoiceType, invoiceContent, invoiceTitle, customerMessage, deliveryId, userReceivingInformationId);\n        return { code: 200, message: \"更新订单成功\" };\n    }\n\n    @Mutation(\"deleteOrder\")\n    async deleteOrder(req: Request, body: {\n        id: number\n    }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.orderService.deleteOrder(id);\n        return { code: 200, message: \"删除订单成功\" };\n    }\n}\n"]}