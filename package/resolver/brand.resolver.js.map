{"version":3,"sources":["resolver/brand.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA4E;AAC5E,2CAAwE;AACxE,6CAA4D;AAE5D,4DAAwD;AAOxD,IAAa,aAAa,GAA1B;IAEI,YAC2C,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IACjE,CAAC;IAIC,MAAM,CAAC,GAAY;;YACrB,MAAM,MAAM,GAAe,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAClE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;QACtD,CAAC;KAAA;IAIK,WAAW,CAAC,GAAY,EAAE,IAAqF;;YACjH,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACrE,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAChD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAIK,WAAW,CAAC,GAAY,EAAE,IAAiG;;YAC7H,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACpD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAIK,WAAW,CAAC,GAAY,EAAE,IAAoB;;YAChD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACxC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;CAEJ,CAAA;AAtCG;IADC,eAAK,CAAC,QAAQ,CAAC;;;;2CAIf;AAID;IADC,kBAAQ,CAAC,aAAa,CAAC;;;;gDAQvB;AAID;IADC,kBAAQ,CAAC,aAAa,CAAC;;;;gDAQvB;AAID;IADC,kBAAQ,CAAC,aAAa,CAAC;;;;gDAQvB;AA5CQ,aAAa;IAFzB,kBAAQ,CAAC,OAAO,CAAC;IACjB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,4BAAY,CAAC,CAAA;qCAAgC,4BAAY;GAH5D,aAAa,CA8CzB;AA9CY,sCAAa","file":"brand.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { BrandsData } from \"../interface/brand/brands.data\";\nimport { BrandService } from \"../service/brand.service\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 品牌的Resolver */\n@Resolver(\"Brand\")\n@UseInterceptors(ExceptionInterceptor)\nexport class BrandResolver {\n\n    constructor(\n        @Inject(BrandService) private readonly brandService: BrandService\n    ) { }\n\n    /* 获取当前所有品牌，用来供商品选择 */\n    @Query(\"brands\")\n    async brands(req: Request): Promise<BrandsData> {\n        const brands: Array<any> = await this.brandService.getBrands(req);\n        return { code: 200, message: \"获取所有品牌成功\", brands };\n    }\n\n    /* 创建指定名称品牌 */\n    @Mutation(\"createBrand\")\n    async createBrand(req: Request, body: { name: string, logo: { bucketName: string, rawName: string, base64: string } }): Promise<Data> {\n        const { name, logo } = body;\n        if (!name || !logo || !logo.bucketName || !logo.rawName || !logo.base64) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.brandService.createBrand(name, logo);\n        return { code: 200, message: \"创建品牌成功\" };\n    }\n\n    /* 更新指定id品牌，品牌下商品不受影响 */\n    @Mutation(\"updateBrand\")\n    async updateBrand(req: Request, body: { id: number, name: string, logo: { bucketName: string, rawName: string, base64: string } }): Promise<Data> {\n        const { id, name, logo } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.brandService.updateBrand(id, name, logo);\n        return { code: 200, message: \"更新品牌成功\" };\n    }\n\n    /* 删除指定id品牌，品牌下存在商品不允许删除 */\n    @Mutation(\"deleteBrand\")\n    async deleteBrand(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.brandService.deleteBrand(id);\n        return { code: 200, message: \"删除品牌成功\" };\n    }\n\n}\n"]}