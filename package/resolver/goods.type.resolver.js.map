{"version":3,"sources":["resolver/goods.type.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA4E;AAC5E,2CAAwE;AAGxE,sEAAiE;AACjE,6CAA4D;AAO5D,IAAa,iBAAiB,GAA9B;IAEI,YAC+C,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAC7E,CAAC;IAIC,UAAU,CAAC,GAAY;;YACzB,MAAM,UAAU,GAAwC,MAAM,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC;YACpG,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC;QAC5D,CAAC;KAAA;IAIK,SAAS,CAAC,GAAY,EAAE,IAAoB;;YAC9C,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,SAAS,GAAQ,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACpE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC;QAC7D,CAAC;KAAA;IAIK,eAAe,CAAC,GAAY,EAAE,IAAsB;;YACtD,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE;gBACP,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;IAIK,eAAe,CAAC,GAAY,EAAE,IAAkC;;YAClE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACtD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;IAIK,eAAe,CAAC,GAAY,EAAE,IAAoB;;YACpD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAChD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;CAEJ,CAAA;AAjDG;IADC,eAAK,CAAC,YAAY,CAAC;;;;mDAInB;AAID;IADC,eAAK,CAAC,WAAW,CAAC;;;;kDAQlB;AAID;IADC,kBAAQ,CAAC,iBAAiB,CAAC;;;;wDAQ3B;AAID;IADC,kBAAQ,CAAC,iBAAiB,CAAC;;;;wDAQ3B;AAID;IADC,kBAAQ,CAAC,iBAAiB,CAAC;;;;wDAQ3B;AAvDQ,iBAAiB;IAF7B,kBAAQ,CAAC,WAAW,CAAC;IACrB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,qCAAgB,CAAC,CAAA;qCAAoC,qCAAgB;GAHxE,iBAAiB,CAyD7B;AAzDY,8CAAiB","file":"goods.type.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { GoodsTypesData } from \"../interface/goodstype/goods.types.data\";\nimport { GoodsTypeData } from \"../interface/goodstype/goods.type.data\";\nimport { GoodsTypeService } from \"../service/goods.type.service\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 商品类型Resolver */\n@Resolver(\"GoodsTyoe\")\n@UseInterceptors(ExceptionInterceptor)\nexport class GoodsTypeResolver {\n\n    constructor(\n        @Inject(GoodsTypeService) private readonly goodsTypeService: GoodsTypeService\n    ) { }\n\n    /* 获取所有商品类型，创建商品时用来供前端选择 */\n    @Query(\"goodsTypes\")\n    async goodsTypes(req: Request): Promise<GoodsTypesData> {\n        const goodsTypes: Array<{ id: number, name: string }> = await this.goodsTypeService.getGoodsTypes();\n        return { code: 200, message: \"获取所有商品类型成功\", goodsTypes };\n    }\n\n    /* 获取指定商品类型详细数据，包括其下商品属性，当为商品添加属性值时，通过这个接口获取商品类型下属性 */\n    @Query(\"goodsType\")\n    async goodsType(req: Request, body: { id: number }): Promise<GoodsTypeData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        const goodsType: any = await this.goodsTypeService.getGoodsType(id);\n        return { code: 200, message: \"获取指定商品类型信息成功\", goodsType };\n    }\n\n    /* 创建指定名称商品类型，创建时其下没有属性 */\n    @Mutation(\"createGoodsType\")\n    async createGoodsType(req: Request, body: { name: string }): Promise<Data> {\n        const { name } = body;\n        if (!name) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.goodsTypeService.createGoodsType(name);\n        return { code: 200, message: \"创建商品类型成功\" };\n    }\n\n    /* 更新指定id商品类型，只能更新名称 */\n    @Mutation(\"updateGoodsType\")\n    async updateGoodsType(req: Request, body: { id: number, name: string }): Promise<Data> {\n        const { id, name } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.goodsTypeService.updateGoodsType(id, name);\n        return { code: 200, message: \"更新商品类型成功\" };\n    }\n\n    /* 删除指定id商品类型，商品类型下有商品时不能删除，如果没有商品，则删除指定商品类型，关联删除其下商品属性 */\n    @Mutation(\"deleteGoodsType\")\n    async deleteGoodsType(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.goodsTypeService.deleteGoodsType(id);\n        return { code: 200, message: \"删除商品类型成功\" };\n    }\n\n}\n"]}