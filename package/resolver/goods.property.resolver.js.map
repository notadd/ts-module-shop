{"version":3,"sources":["resolver/goods.property.resolver.ts"],"names":[],"mappings":"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","file":"goods.property.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { GoodsPropertyService } from \"../service/goods.property.service\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 商品属性Resolver，没有什么Query，查询商品类型时会顺带查询其下商品属性 */\n@Resolver(\"GoodsProperty\")\n@UseInterceptors(ExceptionInterceptor)\nexport class GoodsPropertyResolver {\n\n    constructor(\n        @Inject(GoodsPropertyService) private readonly goodsPropertyService: GoodsPropertyService\n    ) { }\n\n    /* 创建指定商品类型下，指定名称、类型、输入类型、列表值的商品属性 */\n    @Mutation(\"createGoodsProperty\")\n    async createGoodsProperty(req: Request, body: { goodsTypeId: number, name: string, type: \"unique\" | \"radio\" | \"check\", inputType: \"text\" | \"list\" | \"textarea\", list: Array<string> }): Promise<Data> {\n        const { goodsTypeId, name, type, inputType, list } = body;\n        /* list只有在输入类为list时才会存在 */\n        if (!goodsTypeId || !name || !type || !inputType) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        if (type !== \"unique\" && type !== \"radio\" && type !== \"check\") {\n            throw new HttpException(\"type参数不正确\", 404);\n        }\n        if (inputType !== \"text\" && inputType !== \"list\" && inputType !== \"textarea\") {\n            throw new HttpException(\"inputType参数不正确\", 404);\n        }\n        if (inputType === \"list\" && !list) {\n            throw new HttpException(\"输入类型为list时，list列表值必须存在\", 404);\n        }\n        await this.goodsPropertyService.createGoodsProperty(goodsTypeId, name, type, inputType, list);\n        return { code: 200, message: \"创建商品属性成功\" };\n    }\n\n    /* 更新指定id商品属性，可以更新名称、类型、输入类型、列表值，不能更新所属商品类型 */\n    @Mutation(\"updateGoodsProperty\")\n    async updateGoodsProperty(req: Request, body: { id: number, name: string, type: \"unique\" | \"radio\" | \"check\", inputType: \"text\" | \"list\" | \"textarea\", list: Array<string> }): Promise<Data> {\n        const { id, name, type, inputType, list } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        /* 默认认为更新输入类型为list时，必须同时更新列表值 */\n        if (inputType === \"list\" && !list) {\n            throw new HttpException(\"输入类型为list时，list列表值必须存在\", 404);\n        }\n        await this.goodsPropertyService.updateGoodsProperty(id, name, type, inputType, list);\n        return { code: 200, message: \"更新商品属性成功\" };\n    }\n\n    /* 删除指定商品属性，这个属性关联的属性值也会被删除 */\n    @Mutation(\"deleteGoodsProperty\")\n    async deleteGoodsProperty(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.goodsPropertyService.deleteGoodsProperty(id);\n        return { code: 200, message: \"删除商品属性成功\" };\n    }\n\n}\n"]}