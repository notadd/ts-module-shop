{"version":3,"sources":["resolver/delivery.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA4E;AAC5E,2CAAwE;AAExE,kEAA8D;AAC9D,6CAA4D;AAO5D,IAAa,gBAAgB,GAA7B;IAEI,YAC8C,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAC1E,CAAC;IAGC,UAAU,CAAC,GAAY;;YACzB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;YAC9D,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC;QAC5D,CAAC;KAAA;IAGK,cAAc,CAAC,GAAY,EAAE,IAAkG;;YACjI,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;YAClE,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,IAAI,EAAE;gBACtK,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;YAC5F,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;IAGK,cAAc,CAAC,GAAY,EAAE,IAA8G;;YAC7I,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;YACtE,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;YAChG,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;IAGK,cAAc,CAAC,GAAY,EAAE,IAAoB;;YACnD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC9C,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;CAEJ,CAAA;AAnCG;IADC,eAAK,CAAC,YAAY,CAAC;;;;kDAInB;AAGD;IADC,kBAAQ,CAAC,gBAAgB,CAAC;;;;sDAQ1B;AAGD;IADC,kBAAQ,CAAC,gBAAgB,CAAC;;;;sDAQ1B;AAGD;IADC,kBAAQ,CAAC,gBAAgB,CAAC;;;;sDAQ1B;AAxCQ,gBAAgB;IAF5B,kBAAQ,CAAC,UAAU,CAAC;IACpB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,kCAAe,CAAC,CAAA;qCAAmC,kCAAe;GAHrE,gBAAgB,CA0C5B;AA1CY,4CAAgB","file":"delivery.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { DeliveriesData } from \"../interface/delivery/deliveries.data\";\nimport { DeliveryService } from \"../service/delivery.service\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 配送方式Resolver */\n@Resolver(\"Delivery\")\n@UseInterceptors(ExceptionInterceptor)\nexport class DeliveryResolver {\n\n    constructor(\n        @Inject(DeliveryService) private readonly deliveryService: DeliveryService\n    ) { }\n\n    @Query(\"deliveries\")\n    async deliveries(req: Request): Promise<DeliveriesData> {\n        const deliveries = await this.deliveryService.getDeliveries();\n        return { code: 200, message: \"获取所有配送服务成功\", deliveries };\n    }\n\n    @Mutation(\"createDelivery\")\n    async createDelivery(req: Request, body: { name: string, description: string, cost: number, freeLimit: number, valuationFee: number }): Promise<Data> {\n        const { name, description, cost, freeLimit, valuationFee } = body;\n        if (!name || !description || cost === undefined || cost === null || freeLimit === undefined || freeLimit === null || valuationFee === undefined || valuationFee === null) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.deliveryService.createDelivery(name, description, cost, freeLimit, valuationFee);\n        return { code: 200, message: \"创建配送信息成功\" };\n    }\n\n    @Mutation(\"updateDelivery\")\n    async updateDelivery(req: Request, body: { id: number, name: string, description: string, cost: number, freeLimit: number, valuationFee: number }): Promise<Data> {\n        const { id, name, description, cost, freeLimit, valuationFee } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.deliveryService.updateDelivery(id, name, description, cost, freeLimit, valuationFee);\n        return { code: 200, message: \"更新配送信息成功\" };\n    }\n\n    @Mutation(\"deleteDelivery\")\n    async deleteDelivery(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        await this.deliveryService.deleteDelivery(id);\n        return { code: 200, message: \"删除配送信息成功\" };\n    }\n\n}\n"]}