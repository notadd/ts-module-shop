{"version":3,"sources":["resolver/goods.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,gFAA4E;AAC5E,2CAAwE;AAExE,6CAA4D;AAE5D,4DAAwD;AAQxD,IAAa,aAAa,GAA1B;IAEI,YAC2C,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IACjE,CAAC;IAIC,OAAO,CAAC,GAAY,EAAE,IAAkE;;YAC1F,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YAClD,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,OAAO,GAAiB,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;YACnG,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;QACzD,CAAC;KAAA;IAIK,cAAc,CAAC,GAAY,EAAE,IAA8C;;YAC7E,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YACtC,MAAM,cAAc,GAAiB,MAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACrG,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,CAAC;QAChE,CAAC;KAAA;IAIK,KAAK,CAAC,GAAY,EAAE,IAAoB;;YAC1C,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,KAAK,GAAgB,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QACvD,CAAC;KAAA;IAIK,WAAW,CAAC,GAAY,EAAE,IAA2J;;YACvL,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;YACnG,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;gBAC3E,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;YACvH,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAKK,WAAW,CAAC,GAAY,EAAE,IAAuK;;YACnM,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;YACvG,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;YAC3H,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAIK,WAAW,CAAC,GAAY,EAAE,IAAoB;;YAChD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACxC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAIK,eAAe,CAAC,GAAY,EAAE,IAAoB;;YACpD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAC5C,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;QAC/C,CAAC;KAAA;IAIK,iBAAiB,CAAC,GAAY,EAAE,IAA4B;;YAC9D,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAC/C,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC;QACjD,CAAC;KAAA;IAIK,YAAY,CAAC,GAAY,EAAE,IAAoB;;YACjD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACzC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAIK,cAAc,CAAC,GAAY,EAAE,IAA4B;;YAC3D,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAC5C,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;CAEJ,CAAA;AA1GG;IADC,eAAK,CAAC,SAAS,CAAC;;;;4CAQhB;AAID;IADC,eAAK,CAAC,gBAAgB,CAAC;;;;mDAKvB;AAID;IADC,eAAK,CAAC,OAAO,CAAC;;;;0CAQd;AAID;IADC,kBAAQ,CAAC,aAAa,CAAC;;;;gDAQvB;AAKD;IADC,kBAAQ,CAAC,aAAa,CAAC;;;;gDAQvB;AAID;IADC,kBAAQ,CAAC,aAAa,CAAC;;;;gDAQvB;AAID;IADC,kBAAQ,CAAC,iBAAiB,CAAC;;;;oDAQ3B;AAID;IADC,kBAAQ,CAAC,mBAAmB,CAAC;;;;sDAQ7B;AAID;IADC,kBAAQ,CAAC,cAAc,CAAC;;;;iDAQxB;AAID;IADC,kBAAQ,CAAC,gBAAgB,CAAC;;;;mDAQ1B;AAhHQ,aAAa;IAFzB,kBAAQ,CAAC,OAAO,CAAC;IACjB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,4BAAY,CAAC,CAAA;qCAAgC,4BAAY;GAH5D,aAAa,CAkHzB;AAlHY,sCAAa","file":"goods.resolver.js","sourcesContent":["import { RecycleGoodsesData } from \"../interface/goods/recycle.goodses.data\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { GoodsesData } from \"../interface/goods/goodses.data\";\nimport { Resolver, Mutation, Query } from \"@nestjs/graphql\";\nimport { GoodsData } from \"../interface/goods/goods.data\";\nimport { GoodsService } from \"../service/goods.service\";\nimport { Goods } from \"../model/goods.entity\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 商品Resolver */\n@Resolver(\"Goods\")\n@UseInterceptors(ExceptionInterceptor)\nexport class GoodsResolver {\n\n    constructor(\n        @Inject(GoodsService) private readonly goodsService: GoodsService\n    ) { }\n\n    /* 获取指定分类下所有商品，分类只能是三级分类，不需要分类级别，可以分页获取,不传递分页参数，则获取类型下所有商品,回收站中商品不能获取 */\n    @Query(\"goodses\")\n    async goodses(req: Request, body: { classifyId: number, pageNumber: number, pageSize: number }): Promise<GoodsesData> {\n        const { classifyId, pageNumber, pageSize } = body;\n        if (!classifyId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const goodses: Array<Goods> = await this.goodsService.getGoodses(classifyId, pageNumber, pageSize);\n        return { code: 200, message: \"获取指定分类商品成功\", goodses };\n    }\n\n    /* 获取回收站中所有商品，可以分页获取,不传递分页参数，则获取回收站下所有商品 */\n    @Query(\"recycleGoodses\")\n    async recycleGoodses(req: Request, body: { pageNumber: number, pageSize: number }): Promise<RecycleGoodsesData> {\n        const { pageNumber, pageSize } = body;\n        const recycleGoodses: Array<Goods> = await this.goodsService.getRecycleGoodses(pageNumber, pageSize);\n        return { code: 200, message: \"获取指定分类商品成功\", recycleGoodses };\n    }\n\n    /* 获取指定id商品信息，可以获取商品类型以及其下属性，商品的属性值以及关联的属性，用来给商品详情页使用 */\n    @Query(\"goods\")\n    async goods(req: Request, body: { id: number }): Promise<GoodsData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const goods: Goods & any = await this.goodsService.getGoods(id);\n        return { code: 200, message: \"获取指定商品详情成功\", goods };\n    }\n\n    /* 创建指定名称、基本价格、描述、分类、商品类型、品牌的商品，其中只有品牌可以为空*/\n    @Mutation(\"createGoods\")\n    async createGoods(req: Request, body: { name: string, no: string, basePrice: number, discountPrice: number, description: string, classifyId: number, goodsTypeId: number, brandId: number }): Promise<Data> {\n        const { name, no, basePrice, discountPrice, description, classifyId, goodsTypeId, brandId } = body;\n        if (!name || !no || !basePrice || !description || !classifyId || !goodsTypeId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.createGoods(name, no, basePrice, discountPrice, description, classifyId, goodsTypeId, brandId);\n        return { code: 200, message: \"创建商品成功\" };\n    }\n\n    /* 更新指定id商品的名称、基本价格、描述、商品分类、商品类型、品牌，只有id是必须的，其他参数不传代表不更新，只有传递的参数才会被更新，因为这些参数基本不能为空\n    当更新商品类型时，商品下关联的属性值会被删除*/\n    @Mutation(\"updateGoods\")\n    async updateGoods(req: Request, body: { id: number, name: string, no: string, basePrice: number, discountPrice: number, description: string, classifyId: number, goodsTypeId: number, brandId: number }): Promise<Data> {\n        const { id, name, no, basePrice, discountPrice, description, classifyId, goodsTypeId, brandId } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.updateGoods(id, name, no, basePrice, discountPrice, description, classifyId, goodsTypeId, brandId);\n        return { code: 200, message: \"更新商品成功\" };\n    }\n\n    /* 删除指定id商品，删除商品时，其下所有属性值都会被删除 */\n    @Mutation(\"deleteGoods\")\n    async deleteGoods(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.deleteGoods(id);\n        return { code: 200, message: \"删除商品成功\" };\n    }\n\n    /* 软删除商品，软删除后不会在商品列表中显示，商品不可以直接删除，只能先软删除，再delete */\n    @Mutation(\"softDeleteGoods\")\n    async softDeleteGoods(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.softDeleteGoods(id);\n        return { code: 200, message: \"商品放入回收站成功\" };\n    }\n\n    /* 软删除多个商品 */\n    @Mutation(\"softDeleteGoodses\")\n    async softDeleteGoodses(req: Request, body: { ids: Array<number> }): Promise<Data> {\n        const { ids } = body;\n        if (!ids || ids.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.softDeleteGoodses(ids);\n        return { code: 200, message: \"多个商品放入回收站成功\" };\n    }\n\n    /* 从回收站中还原商品 */\n    @Mutation(\"restoreGoods\")\n    async restoreGoods(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.restoreGoods(id);\n        return { code: 200, message: \"商品还原成功\" };\n    }\n\n    /* 从回收站中还原多个商品 */\n    @Mutation(\"restoreGoodses\")\n    async restoreGoodses(req: Request, body: { ids: Array<number> }): Promise<Data> {\n        const { ids } = body;\n        if (!ids || ids.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.goodsService.restoreGoodses(ids);\n        return { code: 200, message: \"多个商品还原成功\" };\n    }\n\n}\n"]}