{"version":3,"sources":["resolver/classify.resolver.ts"],"names":[],"mappings":"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","file":"classify.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { ClassifyService } from \"../service/classify.service\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { Classify } from \"../interface/classify/classify\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 商品分类Resolver */\n@Resolver(\"Classify\")\n@UseInterceptors(ExceptionInterceptor)\nexport class ClassifyResolver {\n\n    constructor(\n        @Inject(ClassifyService) private readonly classifyService: ClassifyService\n    ) { }\n\n    /* 获取多个指定级别分类，如果未指定上级分类，则获取这个级别所有分类，如果指定上级分类，则获取这个上级分类下的所有分类，获取一级分类不需要上级分类 */\n    @Query(\"classifies\")\n    async classifies(req: Request, body: { parentId: number, level: 1 | 2 | 3 }): Promise<Data & { classifies: Array<Classify> }> {\n        const { parentId, level } = body;\n        if (level !== 1 && level !== 2 && level !== 3) {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        const classifies: Array<Classify> = await this.classifyService.getClassifes(parentId, level);\n        return { code: 200, message: \"获取指定分类成功\", classifies };\n    }\n\n    /* 获取指定id、级别分类的信息，由于分类在内部存储为三个实体类，所以必须指定级别 */\n    @Query(\"classify\")\n    async classify(req: Request, body: { id: number, level: 1 | 2 | 3 }): Promise<Data & { classify: Classify }> {\n        const { id, level } = body;\n        if (!id || !level) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (level !== 1 && level !== 2 && level !== 3) {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        const classify: any = await this.classifyService.getClassify(id, level);\n        return { code: 200, message: \"获取指定分类成功\", classify };\n    }\n\n    /* 创建指定名称、描述、级别的分类，级别参数必须传递，二、三级分类必须传递父分类id */\n    @Mutation(\"createClassify\")\n    async createClassify(req: Request, body: { name: string, description: string, level: 1 | 2 | 3, parentId: number }): Promise<Data> {\n        const { name, description, level, parentId } = body;\n        if (!name || !description || !level) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (level !== 1 && level !== 2 && level !== 3) {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        if (level !== 1 && !parentId) {\n            throw new HttpException(\"缺少上级分类\", 400);\n        }\n        await this.classifyService.createClassify(name, description, level, parentId);\n        return { code: 200, message: \"创建分类成功\" };\n    }\n\n    /* 更新指定id、级别的分类，被更新字段为名称、描述 */\n    @Mutation(\"updateClassify\")\n    async updateClassify(req: Request, body: { id: number, name: string, description: string, level: 1 | 2 | 3 }): Promise<Data> {\n        const { id, name, description, level } = body;\n        if (!id || !name || !description || !level) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (level !== 1 && level !== 2 && level !== 3) {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        await this.classifyService.updateClassify(id, name, description, level);\n        return { code: 200, message: \"更新分类成功\" };\n    }\n\n    /* 删除指定id、级别的分类，指定一、二级分类下存在分类或者三级分类下存在商品，不能删除 */\n    @Mutation(\"deleteClassify\")\n    async deleteClassify(req: Request, body: { id: number, level: 1 | 2 | 3 }): Promise<Data> {\n        const { id, level } = body;\n        if (!id || !level) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (level !== 1 && level !== 2 && level !== 3) {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        await this.classifyService.deleteClassify(id, level);\n        return { code: 200, message: \"删除分类成功\" };\n    }\n}\n"]}