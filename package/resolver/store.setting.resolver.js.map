{"version":3,"sources":["resolver/store.setting.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,gFAA4E;AAC5E,2CAAwE;AACxE,4EAAuE;AACvE,6CAA4D;AAO5D,IAAa,oBAAoB,GAAjC;IAEI,YAA0D,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;IAAI,CAAC;IAGjG,YAAY,CAAC,GAAY;;YAC3B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YACzE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;QAC5D,CAAC;KAAA;IAGK,gBAAgB,CAAC,GAAY,EAAE,IAUpC;;YACG,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;YACnH,IAAI,CAAC,cAAc,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;gBAC3I,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE;gBACvB,MAAM,IAAI,sBAAa,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;aAChD;YACD,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,cAAc,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;YACnJ,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;IAGK,iBAAiB,CAAC,GAAY;;YAChC,MAAM,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;YACnD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;CAEJ,CAAA;AAlCG;IADC,eAAK,CAAC,cAAc,CAAC;;;;wDAIrB;AAGD;IADC,kBAAQ,CAAC,kBAAkB,CAAC;;;;4DAqB5B;AAGD;IADC,kBAAQ,CAAC,mBAAmB,CAAC;;;;6DAI7B;AArCQ,oBAAoB;IAFhC,kBAAQ,CAAC,cAAc,CAAC;IACxB,wBAAe,CAAC,4CAAoB,CAAC;IAGrB,WAAA,eAAM,CAAC,2CAAmB,CAAC,CAAA;qCAAuC,2CAAmB;GAFzF,oBAAoB,CAuChC;AAvCY,oDAAoB","file":"store.setting.resolver.js","sourcesContent":["import { StoreSettingData } from \"../interface/storesetting/store.setting.data\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Inject, HttpException, UseInterceptors } from \"@nestjs/common\";\nimport { StoreSettingService } from \"../service/store.setting.service\";\nimport { Resolver, Query, Mutation } from \"@nestjs/graphql\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 商城设置的Resolver */\n@Resolver(\"StoreSetting\")\n@UseInterceptors(ExceptionInterceptor)\nexport class StoreSettingResolver {\n\n    constructor(@Inject(StoreSettingService) private readonly storeSettingService: StoreSettingService) { }\n\n    @Query(\"storeSetting\")\n    async storeSetting(req: Request): Promise<StoreSettingData> {\n        const storeSetting = await this.storeSettingService.getStoreSetting(req);\n        return { code: 200, message: \"获取商城配置成功\", storeSetting };\n    }\n\n    @Mutation(\"saveStoreSetting\")\n    async saveStoreSetting(req: Request, body: {\n        logoBucketName: string,\n        logoRawName: string,\n        logoBase64: string,\n        title: string,\n        region: string,\n        address: string,\n        close: boolean,\n        closeReason: string,\n        servicePhone: string\n    }): Promise<Data> {\n        const { logoBucketName, logoRawName, logoBase64, title, region, address, close, closeReason, servicePhone } = body;\n        if (!logoBucketName || !logoRawName || !logoBase64 || !title || !region || !address || close === undefined || close === null || !servicePhone) {\n            throw new HttpException(\"缺少参数\", 404);\n        }\n        if (close && !closeReason) {\n            throw new HttpException(\"商城关闭必须说明关闭原因\", 404);\n        }\n        await this.storeSettingService.saveStoreSetting(logoBucketName, logoRawName, logoBase64, title, region, address, close, closeReason, servicePhone);\n        return { code: 200, message: \"保存商城设置成功\" };\n    }\n\n    @Mutation(\"clearStoreSetting\")\n    async clearStoreSetting(req: Request): Promise<Data> {\n        await this.storeSettingService.clearStoreSetting();\n        return { code: 200, message: \"清除商城设置成功\" };\n    }\n\n}\n"]}