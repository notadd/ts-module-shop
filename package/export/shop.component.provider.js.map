{"version":3,"sources":["export/shop.component.provider.ts"],"names":[],"mappings":"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","file":"shop.component.provider.js","sourcesContent":["import { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { SecondClassify } from \"../model/second.classify.entity\";\nimport { ThirdClassify } from \"../model/third.classify.entity\";\nimport { FirstClassify } from \"../model/first.classify.entity\";\nimport { getRepositoryToken } from \"@nestjs/typeorm\";\nimport { HttpException } from \"@nestjs/common\";\nimport { Goods } from \"../model/goods.entity\";\n\nexport class ShopComponent {\n\n    constructor(\n        private readonly goodsRepository: Repository<Goods>,\n        private readonly firstClassifyRepository: Repository<FirstClassify>,\n        private readonly secondClassifyRepository: Repository<SecondClassify>,\n        private readonly thirdClassifyRepository: Repository<ThirdClassify>\n    ) { }\n\n    async getSubClassifyIds(id: number, level: 1 | 2): Promise<Array<number> | undefined> {\n        if (level === 1) {\n            const firstClassify: FirstClassify | undefined = await this.firstClassifyRepository.createQueryBuilder(\"first\")\n                .leftJoinAndSelect(\"first.children\", \"second\")\n                .select([\"second.id\"])\n                .getOne();\n            if (!firstClassify) {\n                throw new HttpException(\"指定id=\" + id + \"一级分类不存在\", 404);\n            }\n            return firstClassify.children.map(second => second.id);\n        } else if (level === 2) {\n            const secondClassify: SecondClassify | undefined = await this.secondClassifyRepository.createQueryBuilder(\"second\")\n                .leftJoinAndSelect(\"second.children\", \"third\")\n                .select([\"third.id\"])\n                .getOne();\n            if (!secondClassify) {\n                throw new HttpException(\"指定id=\" + id + \"二级分类不存在\", 404);\n            }\n            return secondClassify.children.map(third => third.id);\n        } else {\n            return undefined;\n        }\n    }\n\n    async getGoodsById(id: number): Promise<Goods> {\n        const goods: Goods | undefined = await this.goodsRepository.createQueryBuilder(\"goods\")\n            .select([\"goods.id\", \"goods.name\", \"goods.no\", \"goods.basePrice\", \"goods.discountPrice\"])\n            .where({ id, recycle: false })\n            .leftJoinAndSelect(\"goods.classify\", \"classify\")\n            .leftJoinAndSelect(\"goods.images\", \"image\")\n            .getOne();\n        if (!goods) {\n            throw new HttpException(\"指定id=\" + id + \"商品不存在\", 404);\n        }\n        return goods;\n    }\n\n    async getGoodsesByIds(ids: Array<number>, pageNumber: number, pageSize: number): Promise<Array<Goods>> {\n        let queryBuilder: SelectQueryBuilder<Goods> = this.goodsRepository.createQueryBuilder(\"goods\")\n            .select([\"goods.id\", \"goods.name\", \"goods.no\", \"goods.basePrice\", \"goods.discountPrice\"])\n            .whereInIds(ids)\n            .leftJoinAndSelect(\"goods.classify\", \"classify\")\n            .leftJoinAndSelect(\"goods.images\", \"image\");\n        if (pageNumber && pageSize) {\n            if (!Number.isInteger(pageNumber) || !Number.isInteger(pageSize)) {\n                throw new HttpException(\"分页参数错误，应为整数\", 404);\n            }\n            queryBuilder = queryBuilder.offset((pageNumber - 1) * pageSize).limit(pageSize);\n        }\n        const goodses: Array<Goods> | undefined = await queryBuilder.getMany();\n        return goodses;\n    }\n\n    async getTotal(ids: Array<number>): Promise<number> {\n        const total: number = await this.goodsRepository.createQueryBuilder(\"goods\").whereInIds(ids).getCount();\n        return total;\n    }\n\n    async findNoExist(ids: Array<number>): Promise<{ exist: boolean, id: number | undefined }> {\n        const goodses: Array<Goods> = await this.goodsRepository.findByIds(ids);\n        for (let i = 0; i < ids.length; i++) {\n            const exist: Goods | undefined = goodses.find(goods => goods.id === ids[i]);\n            if (!exist) {\n                return { exist: false, id: ids[i] };\n            }\n        }\n        return { exist: true, id: undefined };\n    }\n\n}\n\nexport const ShopComponentToken = \"ShopComponentToken\";\n\nexport const ShopComponentProvider = {\n    provide: ShopComponentToken,\n    useFactory: (\n        goodsRepository: Repository<Goods>,\n        firstClassifyRepository: Repository<FirstClassify>,\n        secondClassifyRepository: Repository<SecondClassify>,\n        thirdClassifyRepository: Repository<ThirdClassify>\n    ) => {\n        return new ShopComponent(goodsRepository, firstClassifyRepository, secondClassifyRepository, thirdClassifyRepository);\n    },\n    inject: [getRepositoryToken(Goods), getRepositoryToken(FirstClassify), getRepositoryToken(SecondClassify), getRepositoryToken(ThirdClassify)]\n};\n"]}